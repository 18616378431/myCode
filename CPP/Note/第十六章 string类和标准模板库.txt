第十六章 string类和标准模板库
1.主要内容:string类、auto_ptr、STL(通用编程技术,generic programming)

16.1 string类
1.C风格字符串支持string.h,在C++中为cstring
2.string头文件提供了string类支持
3.stirng类内容:
    [1]将字符串赋给变量
    [2]合并字符串
    [3]比较字符串
    [4]访问各个元素的重载操作符
    [5]在字符串查找字符串和子字符串

16.1.1 构造字符串
1.string有6个构造函数
2.string实际上是模板规范basic_string<char>的一个typedef,同时省略了与内存管理相关的参数
3.size_type是一个依赖于实现的整型,在头文件string中定义
4.string类将string::npos定义为字符串的最大长度,通常为无符号整型int的最大值
5.NBTS(null-byte-terminated string):空字符结束的字符串--传统C字符串
6.表16.1 string类的构造函数
    构造函数                         描述
    string(cosnt char * s)          将string初始化s指向的NBTS
    string(size_type n,char c)      创建一个包含n个元素的string对象,其中每个元素都被初始化为字符c
    string(const string & str,string size_type n = npos)    将string兑现个初始化为对象str中从位置pos开始到结尾的字符串,或从位置pos开始的n个字符
    string()                        创建一个默认的string对象,长度为0
    string(const char * s,size_type n)  将string初始化为s指向的NBTS中的前n个字符,即使超过了NBTS的结尾,仍将位于s之后内存中的内容做为字符进行复制
    template<class Iter> string(Iter begin,Iter end)    将string对象初始化为区间[begin,end]内的字符,其中begin和end的行为就像指针,用于指定位置,范围包括begin在内,但不包括end,
    即[begin,end),该构造函数接收一个模板参数,在使用时Iter将被替换为参数的实际类型,eg:char *
7.重载的操作符
    [1]+= 将一个字符串附加到另一个字符串后面
    [2]= 将一个字符串赋给另一个字符串,第二个参数可以是string对象、C-风格字符串、char
    [3]<< 显示string对象
    [4][ ] 访问字符串中的各个字符
    [5]+ 第二个参数可以是string对象、C-风格字符串、char
    
16.1.2 string类输入
1.C-风格字符串有3种输入方式:
    char info[100];
    [1]cin >> info;
    [2]cin.getline(info,100); //discard \n
    [3]cin.get(info,100);//leave \n in queue
2.string对象2种输入方式：
    string stuff;
    [1]cin >> stuff;//read a word
    [2]getline(cin,stuff);//read a line,discard \n
3.两个版本的getline()都有一个可选参数,用于指定使用哪个字符来确定输入的边界
    [1]cin.getline(info,100,':');//read up to ':',discard :
    [2]getline(cin,stuff,':');//read up to ':',discard :
4.两个版本getline的区别:
    [1]string版本的getline()将自动调整目标string对象的大小,使之刚好能够存储输入的字符
    eg: char fname[10];
        string lname;
        cin >> fname;//problem for input size > 9 characters
        cin >> lname;//can read a very very long word
        cin.getline(fname,10);//may truncate input
        getline(cin,fname);//no truncation
    [2]设计方面的区别,读取C-风格字符串的函数时istream类的方法,而string版本是独立的函数
    eg: cin.operator>>(fname);
        operator>>(cin,name);
5.深入探讨string输入函数:
    [1]string对象的允许最大长度由常量string:npos指定,通常为unsigned int最大值
    [2]第二个限制因素是程序可以使用的内存
    [3]string版本的getline()函数从输入中读取字符,并将其存储到目标string中,直到发生下列3种情况
        (1)到达文件末尾,输入流eofbit将被设置,方法eof()、fail()都返回true
        (2)遇到分界字符(\n),这将把分界字符从输入流中删除,但不存储它
        (3)读取的字符数达到最大允许值(string::npos和可用内存字节较小的一个),这将设置输入流的failbit,方法fail()、eof()将返回true
    [4]输入流对象有一个统计系统,用于跟踪流的错误状态。在这个系统中,检测到文件末尾将设置eofbit寄存器,检测到输入错误时将设置failbit寄存器,出现无法识别的故障将设置badbit寄存器,一切顺利将设置goodbit寄存器
    [5]string版本的operator>>()函数的行为与此类似,只是它不断读取,直到遇到空白字符并将其留在输入队列中,而不是不断读取,直到遇到分解符并将其丢弃,空白字符指空格、换行符、制表符,即isspace()返回true的字符
    [6]string版本的getline()指定分界符后,将把换行符\n视为普通字符

16.3 使用字符串
1.string对象对全部6个关系操作符都进行了重载,可以比较string对象
2.在机器排序序列中,一个对象位于另一个对象前面,则前者被视为小于后者
    如果机器排序序列为ASCII码,则数字将小于大写字符、大写字符将小于小写字符
3.string对象对每个关系操作符都以三种方式进行重载,以便能够将string对象与另一个string对象、C-风格字符串进行比较,并能够将C-风格字符串与string对象比较
    eg: string snake1("cobra");
        string snake2("coral");
        char snake3[] = "anaconda";
        if(snake1 < snake2)//operator< (const string &,const string &)
            ...
        if(snake1 == snake3)//operator== (const string &,const char *)
            ...
        if(snake3 != snake2)//operator!= (const char *,const string &)
            ...
4.string成员函数size()和length()都返回字符串中的字符数
    eg: if(snake1.length() == snake2.size())
            cout << "Both string has the same length.\n";
    length()函数来自较早版本的string类,size()函数为提供STL兼容性添加的
5.可以以多种方式在字符串中搜索给定的子字符串或字符
    find方法的四个版本:重载的find方法
    方法原型                                                    描述
    size_type find(const string & str,size_type pos = 0)const  从字符串的pos位置开始,查找子字符串str,如果找到,则返回该子字符串首次出现时其首字符的索引;否则,返回string::npos
    size_type find(const char * s,size_type pos = 0)const      从字符串的pos位置开始,查找子字符串s,如果找到,则返回该子字符串首次出现时其首字符的索引;否则,返回string::npos
    size_type find(const char * s,size_type pos = 0,size_type n)从字符串的pos位置开始,查找s的前n个字符组成的子字符串,如果找到,则返回该子字符串首次出现时其首字符的索引;否则返回string::npos
    size_type find(char ch,size_type pos = 0)const             从字符串的pos位置开始,查找字符ch,如果找到,则返回该字符首次出现的位置;否则,返回string::npos
6.string的其他find相关方法:
    rfind(),find_first_of(),find_last_of(),find_first_not_of(),find_last_not_of()
    它们的重载函数特征标都与find相同
    [1]rfind:查找子字符串或字符最后一次出现的位置
    [2]find_first_of:在字符串中查找参数中任何一个字符首次出现的位置
        eg: int where = snake1.find_first_of("hark");//将返回r在cobra中的索引 3
    [3]find_last_of:功能与find_first_of相似,查找的是最后一次出现的位置
        eg: int where = snake1.find_last_of("hark");//将返回a在cobra中的位置
    [4]find_first_not_of:在字符串中查找第一个不被包含在参数中的字符
        eg: int where = snake1.find_first_note_of("hark");//将返回c在cobra的位置
    [5]find_last_not_of:在字符串中查找最后一个不被包含在参数中的字符

16.1.4 string还提供了哪些功能
1.string库提供了许多其他工具,包括完成下述功能的函数:
    [1]删除字符串的部分或全部内容
    [2]用一个字符串的部分或全部内容替换另一个字符串的部分或全部内容
    [3]将数据插入到字符串中或删除字符串中的数据
    [4]将一个字符串的部分或全部内容与另一个字符串的部分或全部内容进行比较
    [5]从字符串中提取子字符串
    [6]将一个字符串中的内容复制到另一个字符串中
    [7]交换两个字符串的内容
    ps:这些函数大多都被重载,以便能够同时处理C-风格字符串和string对象,详见附录F
2.string类的自动调整大小功能:
    每当程序将一个字符附加到字符串末尾时,不能仅仅将已有的字符串加大,因为相邻的内存可能被占用了
    因此可能需要分配一个新的内存块,并将原来的内容复制到新的内存单元中
    如果执行大量这样的操作,效率将非常低
    因此很多C++实现分配一个比实际字符串大的内存块,为字符串提供了增大空间
    然而,如果字符串不断增大,超过了内存块的大小,程序将分配一个大小为原来两倍的新内存块,以提供足够的增大空间
    避免不断地分配新内存块
    [1]方法capacity()返回当前分配给字符串的内存块大小
    [2]方法reserve()限定您能够请求内存块的最小长度
        标准容量选择是16的倍数(win7 MS 15bytes)
3.有string对象但需要C-风格字符串,string对象的c_str()方法返回与string对象存储内容相同的指向C-风格字符串的指针
    eg: string filename;
        cout << "Enter filename:";
        cin >> filename;
        ofstream fout;
        fout.open(filename.c_str());
4.可以使用重载的==操作符来比较string对象,但某些情况下会区分大小写
    通常比较两个字符串是否相等不区分大小写
    C库的stricmp()执行不区分大小写的比较(该函数不属于C标准,不一定通用)
    通过创建该函数的重载版本可以避免上述问题
    eg: #include <cstring>
        #include <string>

        inline bool stricmp(cosnt std::string & strA,const std::string & strB)//overloaded function
        {
            return stricmp(strA.c_str(),strB.c_str()) == 0;
        }

        string strA;
        cin >> strA;
        string strB = "mapleSyrup";

        bool bStringAreEqual = stricmp(strA,strB);
        c_str()方法提供了将C-风格字符串函数转换为string对象函数的路径
5.string库是基于一个模板类的
    template< class charT,class traits = char _traits<charT>,class Allocator = allocator<charT> >
    basic_string{...};
    这个类中包含两个typedef
    typedef basic_string<char> string;
    typedef basic_string<wchar_t> wstring;
    这使得能够使用基于char和wchar_t的字符串
    甚至可以开发某种类似字符的类,并对它使用basic_string模板
    traits类描述关于被选择的字符类型的特定情况,如何对值进行比较
    对于char和wchar_t类型的,有预定义的char_traits模板规范,它们都是traits的默认值
    Allocator是一个管理内存分配的类,对于char和wchar_t类型,有预定义的allocator模板规范,它们都是默认的
    它们按通常的方式使用new和delete,但编程者可保留一部分内存,并提供自己的分配方法
    
16.2 auto_ptr类
1.auto_ptr是一个模板类,用于管理动态内存分配的用法
    eg: (1) void remodel(string & str)
            {
                string * ps = new string(str);
                ...
                str = *ps;
                return ;
            }
            仅分配,未释放
        (2) void remodel(string & str)
            {
                string * ps = new string(str);
                ...
                if(weird_thing())
                    throw exception();
                str = *ps;
                delete ps;
                return ;
            }
            出现异常将不执行delete,导致内存泄漏
2.remodel这样的函数终止(正常终止或异常终止),本地变量都将从栈内存中删除,指针ps占据的内存将被释放
    但ps指向的堆内存并没有释放,希望在ps过期时采取另一项额外的措施,对于基本类型并没有这种额外的服务
    但对于类,则可以通过析构函数机制类提供
    ps只是一个常规指针,不是类对象,如果它是类对象,则可以在过期时让它的析构函数删除被指向的内存
    这正是auto_ptr背后的思想

16.2.1 使用auto_ptr
1.auto_ptr模板定义了类似指针的对象,可以将new获得(直接或间接)的地址赋给这种对象
    当auto_ptr对象过期时,其析构函数将使用delete来释放内存
    因此将new返回的地址赋给auto_ptr对象时,无须记住稍后释放这些内存
    在auto_ptr对象过期时,这些内存将自动被释放
2.要创建auto_ptr对象,必须包含头文件#include <memory>,该文件包括auto_ptr模板,然后使用通常的模板句法来实例化所需类型的指针
    eg: 模板中包括
        template<class X> class auto_ptr{
            public:
                explicit auto_ptr(X * p = 0) throw ();
                ...
        };
        //throw ()表示构造函数不引发任何异常,并且构造函数为显式的,不存在指针到auto_ptr对象的隐式类型转换
        //使用
        auto_ptr<double> pd(new double);//an auto_ptr to double,use place of double *
        auto_ptr<string> ps(new string);//an auto_ptr to string,use place of string *
        new double返回指向double的指针,是auto_tr构造函数的参数,原型中p的实参
3.转换remodel函数:
    (1)包含头文件memory
    (2)将指向string的指针替换为指向string的auto_ptr对象
    (3)删除delete语句
    eg: //improve remodel
        #include <memory>
        void remodel(string & str)
        {
            auto_ptr<string> ps(new string(str));
            ...
            if(weird_thing())
                throw exception();
            str = *ps;//可以对auto_ptr对象执行解引用操作
            //delete ps;
            return ;
        }
        auto_ptr<double> pd;
        double * p_reg = new double;
        pd = p_reg;//not allowed(implicit conversion)
        pd = auto_ptr<double> (p_reg);//allowed(explicit conversion)
        auto_ptr<double> pauto = p_reg;//not allowed(implicit conversion)
        auto_ptr<double> pauto(p_reg);//allowed(explicit conversion)
        模板让您能够通过构造函数将auto_ptr对象初始化为一个常规指针
4.auto_ptr是智能指针(smart pointer),类似于指针,但特性比指针更多
    auto_ptr在很多方面被定义为与常规指针类似
    ps是一个auto_ptr,
    可对它执行解除引用操作(*ps)和递增操作(++ps),
    用它来访问结构成员ps->puffIndex
    将它赋给指向同类型的常规指针,
    赋给另一个同类型的auto_ptr

16.2.2 有关auto_ptr的注意事项
1.new和new [],必须与相应的使用delete和delete [],auto_ptr模板使用的是delete,而不是delete []
    因此它只能与new一起使用,而不腻与new []一起使用
2.没有适用于动态数组的auto_ptr,可以复制头文件memory中的auto_ptr模板,重命名为auto_arr_ptr,
    然后对其进行修改,使之使用delete []
    string vacation("I wandered lonely as cloud.");
    auto_ptr<string> pvac(&vacation);//error 将delete用于非堆内存
    只能对new分配的内存使用auto_ptr,而不要对由new []分配或通过声明变量分配的内存使用它
3.
    auto_ptr<string> ps(new string("I reigned lonely as a cloud"));
    auto_ptr<string> vocation;
    vocation = ps;
    如果两个指针为常规指针,指向同一个string对象,其中一个是另一个的拷贝,ps和vocation过期时将试图删除同一个对象两次
    避免这种问题的方法:
    (1)定义赋值操作符,执行深复制,这样两个指针将指向不同的对象,其中一个对象是另一个对象的拷贝
    (2)建立所有权(ownership)概念,对于特定的对象,只能有一个智能指针拥有它,
        智能指针的构造函数只能删除该只能指针拥有的对象,并使赋值操作符转让所有权,这就是用于auto_ptr的策略
    (3)创建智能更高的指针,跟踪引用特定对象的智能指针数,这被称为引用计数(reference counting)
        例如:赋值时将计数加1,指针过期时计数减1,仅当最后一个指针过期时,delete才被调用
        同样的策略也适用于构造函数
4.下面的方法不适用于auto_ptr对象:
    auto_ptr<string> films[5] = {
        auto_ptr<string> (new string("Fowl Balls")),
        auto_ptr<string> (new string("Duck Walks")),
        auto_ptr<string> (new string("Chicken Runs")),
        auto_ptr<string> (new string("Turkey Errors")),
        auto_ptr<string> (new string("Goose Eggs"))
    };
    auto_ptr<string> owin(films[2]);
    int i;
    cout << "The nominees for best avian baseball film are\n";
    for(i = 0;i < 5;i++)
        cout << *films[i] << endl;
    cout << "The winner is " << *pwin << "!\n";
    问题在于,将所有权从films[2]转让给pwin时,它可能导致films[2]不再引用该字符串
    auto_ptr对象放弃所有权后,将可能不再可用,是否可用取决于实现
5.智能指针
    C++库中auto_ptr对象是一种智能指针(smart pointer),智能指针是这样一种类,即其对象的特征类似于指针
    智能指针可用于存储new分配的内存地址,也可被解除引用
    因为只能指针是一个类对象,一次它可修改和扩充简单指针行为
    例如,只能指针可建立引用计数,这样多个对象可共享由智能指针跟踪的同一个值
    当使用该值的兑现数为0时,只能指针将删除这个值
    智能指针可以提高内存的使用效率,帮助防止内存泄漏

16.3 STL
1.STL提供了一组表示容器、迭代器、函数对象和算法的模板
    (1)容器是一个与数组类似的单元,可存储若干个值,STL容器是同质的,即存储的值类型相同
    (2)算法是完成特定任务(对数组进行排序或在链表中查找特定的值)的处方
    (3)迭代器能够用来遍历容器的对象,与能够遍历数组的指针类似,是广义指针
    (4)函数对象是类似于函数的对象,可以是类对象或函数指针(包括函数名,因为函数名被用作指针)
2.STL使得能够构造各种容器(包括数组、队列、链表)和执行各种操作(包括搜索、排序和随机排列)
3.STL不是面向对象编程,而是通用编程技术(generic programming)

16.3.1 vector模板类
1.在计算中矢量对应数组,数学矢量是使用N个分量表示N维数学矢量,数学矢量类似于N维数组
2.计算矢量存储了一组可随机访问的值,即可以使用索引来直接访问矢量的第n个元素,而不必首先访问前面n-1个元素
3.vector模板定义在头文件<vector>(vector.h)中
4.vector模板使用动态内存分配,可以使用初始化参数指出需要多少矢量
    eg: #include <vector>
        using namespace std;
        vector<int> ratings(5);//a vector of 5 ints
        int n;
        cin >> n;
        vector<double> scores(n);//a vector of n doubles
5.vector的[ ]操作符被重载,可以使用通常的数组表示法来访问各个元素
    eg: ratings[0] = 9;
        for(int i =0;i < n;i++)
            cout << scores[i] << endl;
6.分配器:与string类相似,各种STL容器模板都接受一个可选的模板参数,该参数指定使用哪个分配器对象来管理内存
    eg: vector模板的开头:
        template<class T,class Allocator allocator<T> >
        class vector{...};
        如果省略该可选参数,则容器模板将使用默认的allocator<T>类,这个类以标准方式使用new和delete
        
16.3.2 可对矢量执行的操作
1.所有的STL容器都提供了一些基本方法,其中包括size()--返回容器中元素数目,swap()--交换两个容器的内容
    begin()--返回一个指向容器第一个元素的迭代器,end()--返回一个表示超过容器尾的迭代器
2.迭代器:一个广义指针,实际上它可以是指针,也可以是一个可对其执行类似指针的操作--如解除引用(operator *())
    和递增(operator ++())--的对象
    对指向迭代器的指针进行广义化使得STL能够为各种不同的容器类(包括那些简单指针无法处理的类)提供统一的接口
    每个容器类都定义了一个合适的迭代器,该迭代器类型时一个名为iterator的typedef,其作用域为整个类
    eg: 为vector的double类型规范声明一个迭代器
        vector<double>::iterator pd;//pd an iterator
        scores是一个vector<double>对象
        vector<double> scores;
        则可以使用迭代器pd执行这样的操作
        pd = scores.begin();
        *pd = 22.3;
        ++pd;
    迭代器的行为就像指针
    超过结尾(past-the-end)的迭代器,它是一种迭代器,指向个容器最后一个元素后面那个元素
    这与C-分隔字符串最后一个字符后面的空字符类似,空字符是一个值,"超过结尾"是一个指向元素的指针(迭代器)
    (1)end()成员函数标识超过结尾的位置
    如果将迭代器设置为容器的第一个元素,并不断地递增,则最终它将到达容器结尾,从而遍历整个容器的内容
    eg: 可以使用下面的代码显式容器的内容
        for(pd = scores.begin();pd != scores.end();pd++)
            cout << *pd << endl;
    所有容器都包含以上方法
    vector模板类也包含一些只有STL容器才有的方法
    (2)push_back()是一个方便的方法,它将元素添加到矢量末尾,这样做时,它将负责内存管理
    增加矢量长度,使之能够容纳新成员
    eg: vector<double> scores;
        double temp;
        while(cin >>temp && temp >= 0)
            scores.push_back(temp);
        cout << "You entered " << scores.size() << " scores.\n";
        每次循环给scores增加一个元素,无需了解元素的数目,有足够的内存,就可以根据需要增加scores的长度
    (3)arase()删除矢量中给定区间的元素,它接受两个迭代器参数,这些参数定义了要删除的区间
    第一个迭代器指向区间的起始处,第二个迭代器位于区间终止处的后一个位置
    eg: scores.erase(scores.begin(),scores.begin() + 2);
        将删除第一个元素和第二个元素,删除begin()和begin()+1指向的元素
        vector实现了随机访问功能,其实现了begin() + 2的操作
        如果it1、it2是迭代器,则STL文档使用(it1,it2)来表示从it1到it2(不包括it2)的区间
        因此区间[begibn(),end()]将包括集合的所有内容,区间[it1,it1]为空
        []表示法不是C++的部分,只能在文档中使用
        区间[it1,it2]由迭代器it1、it2指定,其范围为it1到it2(不包括it2)
    (4)insert()方法的功能与erase()相反,它接受3个迭代器参数,第一个参数指定了新元素的插入位置
        第二个和第三个迭代器参数定义了被插入区间,该区间通常是另一个容器对象的一部分
    eg: vector<int> old;
        vector<int> new;
        ...
        old.insert(old.begin(),new.begin() + 1,new.end());
        将矢量new中除第一个元素以外的所有元素插入到old矢量的第一个元素前面
        这种情况下拥有超尾元素是非常方便的,因为这使得在矢量尾部附加元素非常简单
    eg: old.insert(old.end(),new.begin() + 1,new.end());
        将新元素插入到old.end()前面,即矢量最后一个元素前面
    (5)总结矢量方法:size(),begin(),end(),push_back(),erase(),insert(),swap()

16.3.3对矢量可执行的其他操作
1.矢量模板没有包含常用的对数组的搜索、排序、随机排序等功能,STL从更广泛的角度定义了非成员(non-member)函数来执行这些操作
    不是为每一个容器类都定义一个操作的函数,而是定义了适用于所有容器类的非成员函数,
    这种设计理念省去了大量重复的工作,定义新的容器类时,遵循正确的指导思想,则它也可以使用非成员函数来执行查找、排序等操作
2.3个具有代表性的STL函数:
    for_each()、random_shuffle()、和sort()
    (1)for_each:可用于许多容器类,它接受3个参数,前两个是定义容器中区间的迭代器,最后一个是指向函数的指针(函数对象)
        for_each()将被指向的函数(第三个参数)应用于容器区间中的各个元素,被指向的函数不能修改容器元素的值
        可以用for_each()函数代替for循环
        eg: //迭代器方法遍历区间
            vector<Review>::iterator pr;
            for(pr = books.begin();pr != books.end();pr++)
                ShowReview(*pr);
            //STL函数遍历区间,可避免显式使用迭代器变量
            for_each(books.begin(),books.end(),ShowReview);
    (2)random_shuffle:接受两个指定区间的迭代器参数,并随机排列该区间的元素
        eg: random_shuffle(books.begin(),books.end());
            //这将随机排列books矢量中的所有元素
            与可用于任何容器类的for_each不同,该函数要求容器类允许随机访问,vector类可以满足这一点
    (3)sort:也要求容器支持随机访问,该函数有两个版本
        [1]第一个版本接受两个定义区间的迭代器参数,并使用为存储在容器中的类型元素定义的<操作符
            对区间中的元素进行操作
            eg: vector<int> coolstuff;
                ...
                sort(coolstuff.begin(),coolstuff,end());
                //将按升序进行排序,排序时使用内置的<操作符对值进行比较
            如果容器元素是用户定义对象,则要使用sort,必须定义能够处理该类型对象的operator< ()函数
            可以为Review提供成员或非成员函数operator< (),则可对包含Review对象的矢量进行排序
            eg: bool operator< (const Review & r1,const Review & r2)
                {
                    if(r1.title < r2.title)
                        return true;
                    else if(r1.title == r2.title && r1.rating < r2.rating)
                        return true;
                    else
                        return false;
                }
                有了这样的函数就可以对包含Review对象的矢量进行排序
                sort(books.begin(),books.end());
        如果想按降序排序或按rating进行排序,可以使用另一种格式sort()
        [2]它接受三个参数,前两个参数是指定区间的迭代器,最后一个参数是指向要使用的函数的指针(函数对象)
            而不是用于比较的operator< (),返回值可转换为bool,false表示两个参数的顺序
            eg: bool WorseThan(const Review & r1,const Review & r2)
                {
                    if(r1.rating < r2.rating)
                        return true;
                    else
                        return false;
                }
                有了这个函数则可以对包含Review对象的矢量进行升序排序
                sort(books.begin(),books.end(),WorseThan);
                注意:与operator< ()函数相比,WorseThan()函数执行的对Review对象进行排序的工作不那么完整,
                    如果两个对象的title成员相同,operator< ()函数将按rating进行排序,而WorseThan将它们视为相同
                    第一种排序称为全排序(total ordering),第二种排序称为完整弱排序(strict weak ordering)
                    在全排序中,如果a<b、b<a都不成立,则a和b必定相同
                    在完整弱排序中,它们可能相同,也可能只是在某方面相同,只能说明它们等价,而不是相同
                    
16.4 通用编程技术
1.STL是一种通用编程技术(generic programming)
    面向对象关注的是编程的数据方面,而通用编程技术关注的是算法
    它们之间的共同点是抽象和创建可重用代码,但理念绝然不同
2.通用编程技术旨在编写独立于数据类型的代码
    C++中完成通用程序的工具是模板,模板使得能够按通用类型定义函数或类,而STL通过通用算法更进了一步
    模板让这一切称为可能,但必须对元素进行仔细地设计

16.4.1 为何使用迭代器
1.理解迭代器是理解STL的关键所在,模板使得算法独立于存储的数据类型,而迭代器使得算法独立于使用的容器类型
    它们都是STL通用方法的重要组成部分
2.为何需要迭代器,为两种不同数据表现实现find函数,即推广这种方法
    eg: (1)在double数组中搜索特定的值
        double * find_ar(double * ar,int n,const double & val)
        {
            for(int i = 0;i < n;i++)
                if(ar[i] == val)
                    return &ar[i];
            return 0;
        }
        可以使用模板将这种算法推广到包含==操作符、任意类型的数组
        尽管如此,这种算法仍然与一种特定的数据结构(数组)关联在一起
        (2)在链表中搜索
        struct Node{
            double item;
            Node * p_next;
        };
        Node * find_ll(Node * head,const double & val)
        {
            Node *start;
            for(start = head;start != 0;start = start->p_next)
                if(start->item == val)
                    return start;
            return 0;
        }
        同样也可以使用模板将这种算法推广到支持==操作符的任何数据类型
        这种算法仍然与特定的数据结构(链表)关联在一起
3.通用编程算法旨在使用同一个算法函数来处理数组、链表或任何其他容器类型
    函数不仅独立于容器中存储的数据类型,而且独立于容器本身的数据结构
    模板提供了存储在容器中的数据类型的通用表示,因此还需要遍历容器中的值的通用表示
    迭代器正是这样的通用表示
4.要实现find函数,迭代器需要具备的特征:
    (1)应能够对迭代器执行解除引用操作,以便能够访问它引用的值.如果p是一个迭代器,则应对*p进行定义
    (2)应能够将一个迭代器赋给另一个.如果p、q都是迭代器,则应对表达式p=q进行定义
    (3)应能够将一个迭代器与另一个进行比较,看是否相等.p、q都是迭代器,则应对p==q和p!=q进行定义
    (4)应能够使用迭代器遍历容器中的所有元素,可以通过对迭代器带定义++p和p++来实现
    (5)迭代器也可以有其他功能
5.STL按功能的强弱定义了多种级别的迭代器
    eg: 重新编写find_ar函数
        typdef double * iterator;
        iterator find_ar(iterator ar,int n,const double & val)
        {
            for(int i = 0;i < n;i++,ar++)
                if(*ar == val)
                    return ar;
            return 0;
        }
        修改函数参数,使其接受两个指示区间的指针参数,其中一个指向数组起始位置,另一个指向数组的超尾
        函数可以返回尾指针,指出没有知道要找的值
        typedef double * iterator;
        iterator find_ar(iterator begin,iterator end,const double & val)
        {
            iterator ar;
            for(ar = begin;ar != end;ar++)
                if(*ar == val)
                    return ar;
            return end;
        }
        //对于find_ll函数可以定义一个迭代器类,其中定义了操作符*和++
        struct Node
        {
            double item;
            Node * p_next;
        };
        class iterator
        {
            Node * pt;
        public:
            iterator():pt(0){}
            iterator(Node * pn):pt(pn){}
            double operator* (){return pt->item;}
            iterator & operator++ ()//for ++it,1 + it
            {
                pt = pt->p_next;
                reutrn *this;
            }
            iterator operator++ (int)//for it++,it + 1(int)
            {
                iterator tmp = *this;
                pt = pt->p_next;
                return tmp;
            }
            //operator== (),operator!= (),etc
        };
        为区分++操作符前缀版本和后缀版本,C++将operator++ ()做为前缀版本,
        将operator++ (int)做为后缀版本,其中的参数永远不会用到,所以不必指定其名称
        //改进后的find_ll函数
        iterator find_ll(iterator head,const double & val)
        {
            iterator start;
            for(start = head;start != 0;++start)
                if(*start == val)
                    return start;
            return 0;
        }
        这和find_ar几乎相同,区别在于如何断言已达到最后一个值
        find_ar使用超尾迭代器,而find_ll使用存储在最后一个元素节点中的空值
        除了这种差别,这两个函数完全相同
        可以要求链表的最后一个元素后面还有一个额外的元素,即让数组和链表都有超尾元素
        并在迭代器到达超尾位置时结束搜索,这样find_ar和find_ll检测数据尾的方式将相同
        从而成为相同的算法,增加超尾元素后,对迭代器的要求变成了对容器类的要求
6.STL遵循上面介绍的方法
    首先,每个容器类(vector,list,deque等)定义了相应的迭代器类型
        对于其中某个类,迭代器可能是指针,而对于另一个类,则可能是对象
        不管实现方式如何,迭代器都将提供所需的操作,如*和++(有些类需要的操作可能比其他类多)
    其次,每个容器类都有一个超尾标记,当迭代器递增到超越容器的最后一个值后,这个值将被赋给迭代器
        每个容器类都有begin()和end()方法,它们分别返回指向容器第一个元素和超尾位置的迭代器
        每个容器类都使用++操作符,让迭代器从指向第一个元素逐步指向超尾位置,从而遍历容器中的每一个元素
    使用容器类时,无需知道其迭代器是如何实现的,也无需知道超尾是如何实现的,而只需知道它有迭代器,
        其begin()返回指向第一个月元素的迭代器,end()返回指向超尾位置的迭代器即可
        eg: 打印vector<double>对象中的值
            vector<double>::iterator pr;
            for(pr = scores.begin();pr != scores.end();pr++)
                cout << *pr << endl;
            pr被声明为vector<double>::iterator类型的迭代器
            使用list<double>类模板来存储分数
            list<double>::iterator pr;
            for(pr = scores.begin();pr != scores.end();pr++)
                cout << *pr << endl;
            唯一不同的是pr的类型
    因此STL为每个类定义适当的迭代器,并以统一的风格设计类,能够为内部表示绝然不同的容器,
    编写相同的代码
    就风格而言,应避免直接使用迭代器,而应尽可能使用STL函数(for_each)来处理细节
7.总结STL方法
    (1)处理容器的算法,应尽可能用通用的术语来表达算法,使之独立于数据类型和容器类型
        为使通用算法能够适用于具体情况,应定义能够满足算法需求的迭代器,
        并把要求加到容器设计上
    (2)基于算法的要求,设计基本迭代器的特征和容器特征

16.4.2 迭代器类型
(1).不同的算法对迭代器的要求也不同
    (1)查找算法需要定义++操作符,以便迭代器能够遍历整个容器,它要求能够读取数据,但不要求能够写数据
    (2)排序算法要求能够随机访问,以便能够交换两个不相邻的元素.如果iter是一个迭代器
        则可以通过定义+操作符来实现随机访问,这样就可以使用iter+10这样的表达式
        排序算法要求能够读写数据
(2).STL定义了5种迭代器,并根据所需的迭代器类型对算法进行了描述
    (1)输入迭代器
    (2)输出迭代器
    (3)正向迭代器
    (4)双向迭代器
    (5)随机访问迭代器
    eg: //find的原型与下面类似
        template <class InputIterator,class T>
        InputIterator find(InputIterator first,InputIterator last,const T & value);
        这种算法需要一个输入迭代器
        //sort原型
        template<class RandomAccessIterator>
        void sort(RandomAccessIterator first,RandomAccessIterator last);
        这种算法需要一个随机访问迭代器
(3)这5中迭代器都可以执行解引用操作(为它们定义了*操作符),也可以进行比较(==或!=)
    如果连个迭代器相同,则对它们执行解引用操作得到的值相同
    iter1 == iter2;则*iter1 == *iter2;
    内置操作符和指针同理
1.输入迭代器:
    (1)从程序角度,来自容器的信息被视为输入
        输入迭代器可被程序用来读取容器中的信息
        对输入迭代器执行解引用操作将使程序能够读取容器中的值,但不一定能让程序修改值
        因此,需要输入迭代器的算法将不会修改容器中的值
    (2)输入迭代器必须能够访问容器中所有的值,这是通过++操作符(前缀或后缀)来实现的
        如果将输入迭代器设置为指向容器中第一个元素,并不断将其递增,直到达到超尾位置
        则它将依次指向容器中的每一个元素
        并不能保证输入迭代器第二次遍历容器时,顺序不变
        输入迭代器被递增后,也不能保证其先前的值仍然可以被解除引用
        基于输入迭代器的任何算法都应当是单通行(single-pass)的,不依赖与前一次遍历时迭代器的值
        也不依赖与本次遍历中前面的迭代器值
    (3)输入迭代器是单向迭代,可以递增,不能倒退
2.输出迭代器:将信息从程序传输给容器的迭代器,程序的输出就是容器的输入
    (1)输出迭代器与输入迭代器相似,只是解除引用可以让程序修改容器的值,而不能读取
        如果算法不用读取容器的内容就可以修改它(生成的要存储的值),则没有理由要求它使用能够读取内容的迭代器
    (2)单通行、只读算法,可以使用输入迭代器
        单通行、只写算法,可以使用输出迭代器
3.正向迭代器:只使用++操作符来遍历容器,每次沿容器向前移动一个元素
    (1)与输出、输入迭代器相似,与输入、输出迭代器不同的是,它总是按相同的顺序遍历一系列的值
    (2)正向迭代器递增后,仍然可以对前面的迭代器值解除引用(如果保存了),并可以得到相同的值
        这些特征使多次通行算法成为可能
    (3)正向迭代器既可以使得能够读取和修改数据,也可以使得只能读取数据
        eg: int * pirw;//read-write iterator
            const int * pir;//read-only iterator
4.双向迭代器:
    双向迭代器具有正向迭代器的所有特性,同时支持两种递减操作符(前缀、后缀)
    eg: reverse函数可以交换第一个元素和最后一个元素,将指向第一个元素的指针加1,
        将指向第二个元素的指针减1,并重复这种操作
5.随机访问迭代器:能够直接跳到容器中的任何一个元素,叫做随机访问,需要随机访问迭代器
    算法如(标准排序、二分检索)要求能够随机访问
    (1)随机访问迭代器具有双向迭代器的所有特性,同时添加了支持随机访问的操作(指针增加运算)
        和用于对元素进行排序的关系操作符
    X表示随机迭代器类型、T表示被指向的类型、a和b都是迭代器值,n为整数,r为随机迭代器变量或引用
                    随机访问迭代器操作
    表达式             描述                 
    a + n           指向a所指元素后的第n个元素
    n + a           与a + n相同
    a - n           指向a所指向元素前的第n个元素
    r += n          等价于r = r + n
    r -= n          等价于r = r - n
    a[n]            等价于*(a + n)
    b - a           b = a + n中n的值
    a < b           如果b - a > 0,则为真
    a > b           如果b < a,则为真
    a >= b          如果!(a < b),则为真
    a <= b          如果!(a > b),则为真
    注:a + n这样的表达式仅当a和a + n都位于容器区间(包括超尾)内时才合法

16.4.3 迭代器层次结构
1.正向迭代器具有输入迭代器和输出迭代器的全部功能,同时还有自己的功能
2.双向迭代器具有正向迭代器的全部功能,同时还有自己的功能
3.随机访问迭代器具有双向迭代器的全部功能,同时还有自己的功能
4.根据特定迭代器类型编写的算法可以使用该种迭代器,也可以使用具有所需功能的任何其他迭代器
    具有随机访问迭代器的容器可以使用为输入迭代器编写的算法
5.为何需要这么多算法,为了在编写算法时尽可能使用要求最低的迭代器,并让它适用于容器的最大区间
    通过使用级别最低的输入迭代器,find()函数便可用于任何包含可读取值的容器
    而sort()函数由于需要随机访问迭代器,所有只能用于支持这种迭代器的容器
6.各种迭代器的类型并不是确定的,而是一种概念.
    (1)每个容器都定义了一个类级typedef名称-iterator,vector<int>的迭代器类型为vector<int>::iterator
        矢量迭代器是随机访问迭代器,它允许使用基于任何迭代器类型的算法,因为随机访问迭代器具有所有迭代器的功能
    (2)list<int>类的迭代器类型为list<int>::iterator
        STL实现了一个双向链表,它使用双向迭代器,因此不能使用基于随机访问迭代器的算法
        但可以使用基于要求较低的迭代器的算法
7.迭代器类型关系:
    输入迭代器|输出迭代器 < 正向迭代器 < 双向迭代器 < 随机访问迭代器
8.迭代器功能:i为迭代器 n为整数
    迭代器功能           输入      输出      正向      双向      随机访问
    解除引用读取          有       无        有          有         有
    解除引用写入          无       有        有          有         有
    固定和可重复排序      无        无        有          有         有
    ++i,i++              有       有         有         有          有 
    --i,i--              无       无         无         有          有
    i[n]                 无       无         无         无          有
    i + n                无       无         无         无          有
    i - n                无       无         无         无          有
    i += n               无       无         无         无          有
    i -= n               无       无         无         无          有
    
    


    
        




    



    






