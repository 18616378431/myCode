第十四章 C++中的代码重用

1.公有继承机制可以实现代码重用
2.(1)可以使用类成员是另一个类的对象实现
	这种方法称为包含(containment)、组合(composition)、层次化(layering)
  (2)使用私有或保护继承
3.包含、私有继承和保护继承用于实现has-a关系,新的类包含另一个类的对象
4.多重继承使用能够使用两个或更多的基类派生出新的类,将基类的功能组合在一起
5.类模板可重用代码:类模板使我们能够使用通用术语定义类,然后使用模板创建针对特定类型定义的特殊类

14.1 包含对象成员的类
1.类成员可以是常规类型(int、float、double、char *)的,也可以是另一个类对象
	eg:	使用C++标准库的String对象表示类的字符串属性、使用valarray表示动态分配内存的数组

14.1.1 valarray类简介
1.valarray类是由头文件valarray支持的
2.这个类用于处理数值或具有类似特性的类,它支持诸如将数组中所有元素的值相加、
	以及在数组中查找最大值和最小值等操作
3.valarray类被定义为模板类,以便能够处理不同的数据类型
4.模板特性意味着声明对象时,必须指定具体的数据类型
	eg:	声明valarray对象,在valarray后面加上尖括号并在其中指明数据类型
		valarray<int> q_values;//int array
		valarray<double> weights;//double array
5.valarray用法,使用valarray类对象,构造函数及其他类方法
	eg:	double gpa[5] = {3.1,3.5,3.8,2.9,3.3};
		valarray<double> v1;//double array size 0
		valarray<int> v2(8);//八个int元素的数组
		valarray<int> v3(10,8);//8个int元素的数组,每个元素都设置为值10
		valarray<double> v4(gpa,4);//4个元素的数组,初始化为gpa数组的前四个值
	可以创建长度为0的空数组、指定长度的空数组、所有元素都被指定值初始化的数组、
	以及用常规数组中的值进行初始化的数组
6.valarray类方法
	(1)operator[] :通过下标访问数组元素
	(2)size():	返回数组中包含元素的个数
	(3)sum():	返回所有元素的和
	(4)max():	返回最大的元素
	(5)min():	返回最小的元素
	
14.1.2 Student类的设计
1.可以通过公有继承姓名、分数类多重公有继承来派生学生类,学生类与分数、姓名类不是is-a模型,
	学生不是分数也不是考试成绩,学生与分数、姓名的关系是has-a关系
	学生有姓名和考试成绩
2.用于建立has-a关系的C++技术是组合(包含),即创建一个包含其他类的对象
	eg:	将Student类声明为
		class Student
		{
		private:
			string name;//string object
			valarray<double> scores;//valarray<double> object
			...
		};
	Student类可以通过string、valarray对象的公有接口访问及修改其数据
	Student类外只能通过其公有接口访问及修改其数据
	Student类获得了其成员对象的实现,但没有继承接口
3.接口和实现
	(1)公有继承类可以继承接口,可能还有实现(基类的纯虚函数提供接口,但不提供实现)
	(2)获得接口是is-a关系的组成部分,
	(3)使用组合,类可以获得实现,但不能获取接口
	(4)不继承接口是has-a关系的组成部分
4.has-a关系,类对象不自动获得被包含对象的接口,被包含对象的接口可能对当前类对象时没有意义的
	可以在当前类对象的成员函数内部使用被包含对象的成员函数

14.1.3 Student类范例
	(1).explicit用于构造函数关闭参数类型到类类型的转换,防止隐式转换
	(2).使用const防止方法修改数据
1.初始化被包含的对象
	(1)使用成员初始化列表初始化对象成员
	(2)使用成员初始化列表初始化派生类对象的基类部分
	(3)使用初始化列表初始化内置类型
	(4)初始化列表仅能用于构造函数
	(5)继承的对象,构造函数使用初始化列表通过类名调用特定的基类构造函数
		对于成员对象,构造函数则使用成员名
		eg:	Student(const char & str,const double * pd,int n):name(str),scores(pd,n){}
		因为构造函数初始化的是成员对象,而不是继承的对象,在初始化列表中使用成员名,而不是类名
	(6)C++要求在构建对象的其他部分之前,先构建继承对象的所有成员
		省略初始化列表,C++将使用成员对象类的默认构造函数
	(7)初始化列表的初始顺序:初始化列表初始化多个项目时,这些项目被初始化的顺序为它们被声明的顺序
		而不是它们在初始化列表中的顺序
		eg:	Student(const char * str,const double * pd,int n):scores(n),name(str){}
			name先声明则先初始化
	(8)如果类的一个成员使用另一个成员的值进行初始化,则初始化的顺序就很重要
2.使用被包含对象的接口
	(1)被包含对象的接口不是公有的,但可以在类方法中使用它
	(2)当前类可以使用当前类的公有方法,被包含类可以在当前类内部使用其所属类的方法
3.使用新的Student类

14.2 私有继承
	(1)另一种实现has-a关系的方式--私有继承
	(2)使用私有继承,基类的公有成员和保护成员将成为派生类的私有成员
		基类方法将不会成为派生类的公有接口的一部分,但可以在派生类成员中使用它们
	(3)公有继承,基类的公有方法将成为派生类的公有方法,is-a关系,派生类继承基类的接口
		私有继承,基类的公有方法将成为派生类的私有方法,has-a关系的一部分,派生类不继承基类的接口
	(4)包含将对象做为一个命名的成员对象添加到类中,私有继承将对象做为一个未被命名的继承对象添加到类中
	(5)使用术语子对象(subobject)来表示通过继承或包含添加的对象
	(6)私有继承提供的特性与包含相同,获得实现但不获得接口,私有继承也可以实现has-a关系
	(7)使用私有继承使用关键字private而不是public来定义类
		private是默认值,省略代表为私有继承
		eg:	class Studen:private std::string,private std::valarray<double>
			{
			public:
				...
			};
	(8)使用多个基类的继承称为多重继承(multiple inheritance,MI)
		公有MI将导致一些问题,必须使用额外的句法规则来解决它们
	(9)包含与私有继承的区别[1]
		包含需提供显式命名的对象成员
		私有继承提供无名称的子对象成员
1.初始化基类组件
	(1)构造函数使用成员初始化列表句法,它使用继承类的构造函数而不是类成员
		eg:	typdef std::valarray<double> ArrayDb;
			做为成员对象的初始化方法
			Student(const char * str,double * pd,int n):name(str),scores(pd,n){...}
			做为继承类的初始化方法
			Student(const char * str,double * pd,int n):std::string(str),ArrayDb(pd,n){...}
		这是包含和私有继承的第二个区别[2]
2.访问基类的方法
	(1)使用私有继承时,只能在派生类的方法中使用基类的方法
	(2)使用包含时,使用对象名来调用方法,
		使用私有继承时,使用类名及作用域解析操作符来调用基类方法
		eg:	[1]包含的调用方法
				typdef std::valarray<double> ArrayDb;
				string name;
				ArrayDb scores;
				调用
				name.size();
				scores.sum() / scores.size();
			[2]私有继承的调用方法
				typdef std::valarray<double> ArrayDb;
				if(ArrayDb::size() > 0)
				{
					return ArrayDb::sum() / ArrayDb.size();
				}
				else
				{
					return 0;
				}
3.访问基类对象
	(1)使用作用域解析操作符可以访问基类方法
		使用基类本身的对象,可以使用强制类型转换,将派生类转换为基类
	(2)指针this为调用方法的对象
		eg:	const std::string & Name()const
			{
				return (const std::string &)*this;
			}
4.访问基类的友元函数
	(1)友元不属于类,不能使用类名限定访问
		可以显式地转换为基类来调用正确的函数
		eg:	ostream & operator<< (ostream & os,const Student & stu)
			{
				os << "Scores for " << (const string &)stu << endl;
			}
	(2)私有继承中,不进行显式强制类型转换时,不能将指向派生类的引用或指针赋给基类引用或指针
		公有继承也需要将stu进行显式强制转换,否则与当前类友元匹配形成递归调用
		os << stu;
	(3)多重继承时,编译器无法确定转换为哪一个基类,如果多个基类都提供了相同的函数
5.使用修改后的Student类
6.使用包含还是私有继承
	(1)既可以使用包含,也可以使用私有继承来建立has-a关系
	(2)包含易于理解,类声明中包含表示被包含类的显式命名对象,代码可通过名称来引用这些对象
		继承使得关系更抽象,且会引起问题,从多个基类继承时,包含同名方法的独立基类、共享祖先的独立基类
		包含可以包含多个同类的子对象,继承只能使用一个这样的对象,且对象没有名称
	(3)私有继承提供的特性比包含多,类的保护成员在派生类中是可用的,在继承结构外是不可用的
		如果使用包含将这样的类包含在另一个类中,后者将不是派生类,位于继承层次外,不能访问保护成员
		通过继承得到的是派生类,它能够访问基类的保护成员
	(4)需要重新定义虚函数的情况下,需要使用私有继承
		派生类可以重新定义虚函数,包含类不能
		使用私有继承,重新定义的函数将只能在类中使用,而不是公有的
	(5)通常,应使用包含建立has-a关系
		如果新类需要访问原有类的保护成员,或需要重新定义虚函数,则应使用私有继承
7.保护继承
	(1)保护继承是私有继承的变体
		在列出基类时使用protected关键字
		eg:	class Student:protected std::valarray<double>,protected std::string
			{
			};
	(2)使用保护继承时,基类的公有成员和保护成员都将成为派生类的保护成员
	(3)和私有继承相似,基类的接口在派生类中可用,在继承结构外是不可用的
	(4)从派生类派生出的类,私有继承和保护继承的区别:
		[1]私有继承时,第三代类将不能使用基类的接口,因为基类的公有方法在派生类中将变为私有的
		[2]使用保护继承时,基类的公有方法在派生类中将变为受保护的,第三代派生类中可以使用它们
	(5)不同种类的继承
		特征				公有继承				保护继承				私有继承
		公有成员变成		派生类的公有成员		派生类的保护成员		派生类的私有成员
		保护成员变成		派生类的保护成员		派生类的保护成员		派生类的私有成员
		私有成员变成		只能通过基类接口访问	只能通过基类接口访问	只能通过基类接口访问	
		能否隐式向上转换	是						是(只能在派生类中)						否
8.使用using重新定义访问权限
	(1)使用保护派生或私有派生时,基类的公有成员将成为保护成员或私有成员
		在派生类外使用基类访问,通过定义使用基类方法的派生类公有方法
		eg:	double Student::sum()const
			{
				return ArrayDb::sum():
			}
	(2)在派生类的公有部分使用using声明来指出可以使用的基类成员,该方法在私有派生情况下也可行
		eg:	class Studen:private std::string,std::valarray<double>
			{
			public:
				using std::valarray<double>::min;
				using std::valarray<double>::max;
			};
			ada // array of Student
			cout << ada[i].max() << endl;
			上述声明使得valarray的min、max方法可用,将像类的公有方法
			注意:using声明只使用成员名----没有圆括号、函数特征标、返回类型
		eg: using std::valarray<double>::operator[];
			using声明仅适用于继承,不适用于包含
	(3)老式方法使私有继承的基类的方法可用
		在派生类的公有部分重新声明基类的方法,将方法名放在派生类的公有部分
		eg:	class Studen:private std::string,std::valarray<double>
			{
			public:
				std::valarray<double>::operator[];//只使用名称声明
			};
			注意:该方法即将摒弃

14.3 多重继承
1.MI描述的是有多个直接基类的类,与单继承一样,公有MI表示is-a关系
	eg:	class SingingWaiter:public Waiter,public Singer
		{
		...
		};
2.必须使用关键字public限定每一个基类,否则编译器将默认视为private私有派生
	eg:	class SingingWaiter:public Waiter,Singer//Singer is private base
		{
		...
		};
3.私有MI和保护MI表示has-a关系
4.MI可能遇到的问题:
	(1)从两个不同基类继承同名方法
	(2)从两个或更多相关基类继承同一个类的多个实例

14.3.1 有多少Worker
	(1)从Waiter和Singer派生出SingingWaiter派生类
		Waiter和Singer均公有派生自Worker
		class SingingWaiter:public Waiter,public Singer{...};
		SingingWaiter将包含两个Worker组件
	(2)这种情况下将基类指针指向派生类将产生二义性
		eg:	SingingWaiter ed;
			Worker * pw = &ed;//ed中的基类结构中的Singer和Waiter各包含一个Woker组件,产生二义性
			这种赋值将把基类指针设置为派生类对象中的基类对象的地址
			ed中包含两个Worker对象,有两个地址可供选择,应使用类型转换来指定对象
			Worker * pw1 = (Waiter *)&ed;
			Worker * pw2 = (Singer *)&ed;
			这将使得使用基类指针来引用不同的对象(多态性)复杂化
	(3)使用虚基类解决派生对象中的相同基类组件冲突
1.虚基类
	(1)虚基类使得从多个类(它们的基类相同)派生出的对象只继承一个基类对象
		eg:	Singer和Waiter在类声明中使用virtual关键字,可以使Worker被用作Singer和Waiter的虚基类
			(virtual和public的次序无关)
			class Singer:public virtual Worker{...};
			class Waiter:virtual public Worker{...};
			可以将SingingWaiter定义为
			SingingWaiter:public Singer,public Waiter{...};
			SingingWaiter将只包含Worker对象的一个拷贝,继承的Singer和Waiter对象共享一个Worker对象,
			而不是各自引入自己的Worker对象拷贝
			SingingWaiter只包含一个Woker对象,可以使用多态
2.新的构造函数规则
	(1)使用虚基类时需要对派生类的构造函数使用新的句法,
		常规类可以在初始化列表中调用基类构造函数进行初始化基类组件
		并可以逐级向下传递
		虚基类对于自动传递将不起作用
		eg: 常规类
			class A
			{
			private:
				int a;
			public:
				A(int n = 0){a = n;}
			};
			class B:public A
			{
			private:
				int b;
			public:
				B(int m = 0,int n = 0):A(n){b = m;}
			};
			class C:public B
			{
			private:
				int c;
			public:
				C(int q = 0,int m = 0,int n = 0):B(m,n){c = q;}
			};
			C类的构造函数只能代用B类的构造函数
			B类的构造函数只能调用A类的构造函数
			C类的构造函数使用q,并将值m、n传递给B类的构造函数
			B类的构造函数使用m,并将n传递给A的构造函数
			虚基类对于这种自动传递将不起作用
			
			SingingWaiter(const Worker & wk,int p = 0,int v = Singer::other):Waiter(wk,p),Singer(wk,v){}
			信息自动传递时将通过两条不同的途径(Singer,Waiter)将wk传递给Woker对象
			为避免这种冲突,C++在基类是虚拟时将禁止信息通过中间类自动传递给基类
			上述构造函数初始化了p、v所对应的成员,但wk将不会传递给Woker基类
			编译器必须在构造派生对象之前构造基类对象组件,上述情况将使用基类的默认构造函数初始化基类组件
			如果不希望使用默认构造函数初始化基类组件,则虚显式调用虚基类的构造函数
			
			SingingWaiter(const Worker & wk,int p = 0,int v = Singer::other):Worker(wk),Waiter(wk,p),Singer(wk,v){}
			对于虚基类的初始化必须这样做,对于非虚基类,则是非法的
	(2)如果有间接虚基类,则除非只需使用该虚基类的默认构造函数,否则必须显式地调用该虚基类的构造函数进行初始化

14.3.2 哪个方法
	(1)在单继承中,如果没有重新定义方法,派生类对象调用基类方法,则将使用最近祖先中的定义
		在多继承中,每个直接祖先中都有一个相同的方法定义,派生类对象调用基类方法,则将产生二义性
	(2)多重继承可能导致函数调用的二义性,
		eg:	SingingWaiter中没有重新定义Show方法
			SingingWaiter newhire("Elise Hawks",2005,6,soprano);
			newhire.Show();//产生二义性
	(3)可以使用作用域解析操作符指定调用哪个基类的方法
		eg:	newhire.Singer::Show();
	(4)最好的方法是在多重继承的派生类中重新定义基类方法,并指出要使用哪个方法
		eg:	void SingingWaiter::Show()const
			{
				Singer::Show();
			}
	(5)对于单继承,派生类调用基类的方法是可以的
		eg:	void Worker::Show()const//base class
			{
				...
			}
			void Waiter::Show()const//Waiter继承自Woker
			{
				Worker::Show();
				...
			}
			void HeadWaiter::Show()const//HeadWaiter继承自Waiter
			{
				Worker::Show();
				...
			}
			这种继承对多重继承无效
			void SingingWaiter::Show()const
			{
				Singer::Show();
			}
			这种方法忽略了Waiter组件,可以添加Waiter组件
			void SingingWaiter::Show()const
			{
				Singer::Show();
				Waiter::Show();
			}
			这将导致在Waiter、Singer的Show方法调用Woker基类的方法两次,显式两次同样的内容
			
			组件冲突解决方案
			[1]解决方式可以是模块化方式,而不是递增方式
			提供一个只显式Worker、Waiter、Singer组件的方法
			void Worker::Data()const
			{
				...
			}
			void Singer::Data()const
			{
				...
			}
			void Waiter::Data()const
			{
				...
			}
			void SingingWaiter::Data()const
			{
				Waiter::Data();
				Singer::Data();
			}
			void SingingWaiter::Show()const
			{
				Worker::Data();
				Data();
			}
			其他Show方法也可以组合适当的组件进行显示
			将Data方法设置为保护的,在继承层次中可用
			[2]将所有数据组件都设置为保护的,而不是私有的,使用保护方法可以更有效地控制对数据的访问
				祖先相同时,使用MI必须使用虚基类,并修改构造函数的初始化规则
1.混合使用虚基类和非虚基类
	(1)基类是虚基类,派生类将包含基类的一个子对象
		基类是非虚基类,派生类将包含多个子对象
	(2)当类通过多条虚拟途径和非虚拟途径继承某个特定的基类时,
		该类将包含一个表示所有虚拟途径的基类的子对象和分别表示各条非虚拟途径的多个基类子对象
2.虚基类和支配
	(1)使用虚基类将改变C++解析二义性的方式
	(2)使用非虚基类时规则很简单
		如果类从不同的类那里继承了两个或更多的同名成员,则使用该成员时,如果没有使用类名进行限定,
		将导致二义性
		如果使用的是虚基类,将不会导致二义性
		如果某个名称优先于其他名称,则使用它,即便不适用限定符,不会导致二义性
		派生类中的名称优先于直接或间接祖先类中的相同名称
		eg:	class B
			{
			public:
				short q();
			};
			class C:virtual public B
			{
			public:
				long q();
				int omb();
			};
			class D:public C
			{
			...
			};
			class E:virtual public B
			{
			private:
				int omb();
			};
			class F:public D,public E
			{
			...
			};
			虚拟二义性规则与访问规则无关

14.3.3 MI小结
1.一个类从两个不同的类继承了同名成员,则需要在派生类中使用类限定符类区分它们
2.一个类通过多种途径继承了一个非虚基类,则该类从每种途径分别继承非虚基类的一个实例
3.当派生类使用关键字virtual来指示派生时,基类就成为了虚基类
	eg:	class Marketing:virtual public Reality{...};
4.从虚基类的一个或多个实例派生而来的类将只继承了一个基类对象
	(1)有间接虚基类的派生类包含直接调用间接基类构造函数的构造函数,这对于间接非虚基类来说是非法的
	(2)通过优先规则解决名称二义性

14.4 类模板
1.容器类(container class)被设计用来存储其他对象或数据类型
2.类模板:模板提供参数化(parameterized)类型,即能够将类型名做为参数传递给接收方来建立类或函数

14.4.1 定义类模板
1.采用模板时,将使用模板定义替换Stack声明,使用模板函数替换Stack成员函数
	eg:	//native class
		typedef unsigned long Item;
		class Stack
		{
		private:
			enum{MAX = 10};
			Item items[MAX];
			int top;//栈顶索引
		public:
			//构造函数
			Stack();
			//判栈空
			bool isempty()const;
			//判栈满
			bool isfull()const;
			//压入,栈满返回false,否则返回true
			bool push(const Item & item);//添加元素到栈
			//弹出,栈空返回true,否则返回true
			bool pop(Item & item);//弹出栈顶元素到item
		};
		//template class
		(1)模板类以下面的代码开头
			template <class Type>
			class Test{...};
			关键字template告诉编译器将要定义一个模板
			尖括号中的内容相当于函数的参数列表,可以把关键字class看做是变量的类型名
			该变量接受类型做为其值,把Type看做是该变量的名称
			使用class并不意味着Type必须是一个类,只是表明Type是一个通用的类型说明符
			在使用模板时,将使用实际的类型替换它
		(2)较新的C++使用typename代替class
			template <typename Type>
			可以使用自己的通用类型名代替Type,其命名规则与其他标识符相同
			向前流行的选项包括T和Type
			当模板被调用时,Type将被具体的类型值(int/string)取代
			在模板定义中可以使用通用的类型名来标识堆栈中的类型
			应将声明标识Item的所有typedef替换为Type
			Item item[MAX];
			=>
			Type item[MAX];
		(3)可以使用模板成员函数替换原有类的类方法,每个函数头都将以相同的模板声明开头
			template <class Type>
			应使用通用类型名Type替换typedef标识符item
			还需将类限定符从Stack::替换为Stack<Type>::
			bool Stack::push(cosnt Item & item)
			{
				...
			}
			=>
			template <class Type>//or template <typename Type>
			bool Stack<Type>::push(const Type & item)
			{
				...
			}
			如果在类声明中定义了内联方法,则可省略模板前缀和类限定符
2.类模板定义指示编译器如何生成类和成员函数定义
3.模板的具体实现被称为实例化(instantiation)或具体化(specialization)
	除非编译器实现了新的export关键字,否则将模板成员函数放置在一个独立的实现文件中奖无法运行
	因为模板不是函数不能单独编译
	模板必须与特定的模板实例化请求一起使用
	最简单的方法是将所有模板信息放在一个头文件中,并在要使用这些模板的文件中包含该头文件
4.如果编译器实现了export关键字,则可以将模板方法定义放在一个独立的文件中,条件是每个模板声明都以export开始
	eg:	export tempalte <typename Type>
		class Test{...};
		然后按照常规方式进行:
		(1)将模板声明放在一个单独的头文件中,并使用#include编译指令使程序能够使用这些声明
		(2)将模板类的方法定义放在一个源代码文件中,在该文件中包含头文件,并使用工程文件使程序能够使用这些定义
		
14.4.2 使用模板类
1.程序包含模板文件并不能生成模板类,必须请求实例化
	需要声明一个类型为模板类的对象,使用具体类型替换通用类型名
	eg:	Stack<int> kernels;//ints stack
		Stack<string> colonels;//string stack
		编译器将按照Stack<int/string>模板分别生成独立的类声明和定义
		并分别使用int/string替换模板中的Type
		使用的算法必须与类型一致
2.通用类型标识符(Type)称为类型参数(type parameter),赋给它们的不能是数字,只能是类型
3.类模板必须要显式地提供所需类型,与常规的函数模板不同,编译器可以根据传递的参数类型生成相应类型的函数
	eg:	常规函数模板
		template <class T>
		void simple(T t){cout << t << endl;}
		simple(2);//int
		simple("two");//char *

14.4.3 深入探讨模板类
(1)可以将内置类型或类对象用作模板类的类型
(2)指针也可以作为模板类的类型参数(char *)
1.不正确地使用指针堆栈
	eg:	Stack<char *> st;//a pointer stack
		[1]将string po替换为char *po,在cin保存输入流时发生崩溃,仅声明了指针,未对输入内容分配内存单元
		[2]将string po替换为char po[40],分配了保存输入的内存,但与pop方法冲突,引用了数组名,不能为数组名赋值
			item应引用某种类型的左值,而不是数组名
			tempalte <class Type>
			bool Stack<Type>::pop(Type & item){...}
		[3]将string替换为char * po = new char[40]为输入分配的空间,po为变量,与pop兼容,
			只有一个po变量,每次输入都将覆盖同一块内存区域,并且加入到栈中的地址都相同
			弹栈操作得到的地址总是相同的,堆栈并没有保存每一个新字符串
2.正确地使用指针堆栈
	(1)让调用程序提供一个指针数组,每个指针都指向不同的字符串
	(2)堆栈仅负责管理指针,创建指针数组是调用程序的职责
3.原型中可以将类类型的参数声明为Stack,这种声明仅能够在类中使用,
	可以在模板声明或模板定义中使用这种缩写,指定返回类型或使用作用域解析操作符时
	在类外面必须使用完整的类型Stack<Type>
	eg:	Stack<Type> & Stack<Type>::operator= (const Stack<Type> & st){...}

14.4.4 数组模板范例和非类型参数
1.模板常被用作容器类,类型参数的概念非常适用于相同存储方案用于不同类型
	为容器类提供可重用代码是引入模板的主要动机
2.数组模板:
	(1)使用动态数组和构造函数参数提供数组大小
	(2)使用模板参数来提供常规数组的大小
3.使用模板参数指定数组大小
	eg:	template <class T,int n>
		T为通用类型,n的类型为int
	(1)指定特殊类型而不是用作通用类型名,称为非类型(non-type)或表达式(expression)参数
		eg: ArrayTP<double,12> weights;
			这个声明将导致编译器定义名为ArrayTP<double,12>的类,并创建一个对象
			定义类时,编译器将使用double替换T,使用12替换n
	(2)表达式参数限制:
		表达式参数可以使用整型、枚举、引用或指针,double m为不合法的,double *pm则是合法的
		模板的代码不能修改参数的值,也不能使用参数的地址
		eg:	ArrayTP<double,12>不能使用n++或&n
	(3)在实例化模板时,用作表达式参数的值必须是常量表达式
	(4)优点:相对于使用new堆内存,使用表达式参数使用栈内存,速度更快
	(5)缺点:每种数组大小都将生成不同的模板
		eg:	ArrayTP<double,12> weights;
			ArrayTP<double,13> weights1;
			下面将生成一个数组定义
			Stack<int> egge(11);
			Stack<int> egge(12);
	(6)动态内存方法更通用,数组大小定义是存储在类成员中的,而不是硬编码存储在类定义中的
		这样可以将一种尺寸的数组赋给另一种尺寸的数组,也可以创建允许数组大小可变的类

14.4.5 模板多功能性
	(1)可以将用于常规类的技术用于模板类
		模板类可用作基类、组件类、其他模板的类型参数
		eg:	tempalte <class T>
			class Array
			{
			private:
				T entry;
				...
			};
			
			template <class Type>
			class GrowArray:public Array<Type>//inheritance
			{
				...
			};
			
			template <class Tp>
			class Stack
			{
			
				Array<Tp> ar;//use as a component 组件
				...
			};
			//use
			Array< Stack<int> > asi;//stack of int
			//必须使用空格将两个>分开以免混淆
1.递归使用模板
	eg:	ArrayTP< ArrayTP<int,5>,10 > twodee;
		twodee是包含十个元素的数组,其中每个元素是包含5个int的数组
		等价声明
		int twodede[10][5];
		模板句法中,维的顺序与等价的二维数组相反
2.使用多个类型参数
	(1)模板可以包含多个类型的参数
	eg:	template <class T1,class T2>
		class Pair
		{
		private:
			T1 a;
			T2 b;
			...
		};
3.默认类型模板参数
	(1)模板的另一个特性,可以为类型参数提供默认值
		eg:	tempalte <class T1,class T2 = int>
			class Topo{...}
		如果传参省略T2,编译器将使用默认值int
		eg:	Topo<double,double> m;//T1、T2 all double
			Topo<double> m;//T1 double,T2 for default int
	(2)标准模板库经常使用该特性,将默认类型设置为类
	(3)可以为类模板参数提供默认值,但不能为函数模板参数提供默认值
		可以为非类型参数提供默认值,对于类模板和函数模板都适用

14.4.6 模板的具体化
	(1)类模板和函数模板相似,有隐式实例化、显式实例化、显式具体化,统称为具体化(specialization)
	(2)模板以通用类型的方式描述类,具体化是使用具体的类型生成类声明
1.隐式实例化(implicit instantiation)
	声明一个或多个对象,指出所需类型,编译器使用通用模板提供的方法生成具体的类定义
	编译器仅在需要创建对象时生成模板类定义,编译器在需要对象之前不会生成隐式实例化
	eg:	ArrayTP<int,10> stuff;//implicit instantiation
		ArrayTP<double,30> *pt;//non-object,only a pointer,non-instantiation
		pt = new ArrayTP<double,30>;//object is needed,生成类定义并创建对象
2.显式实例化
	使用关键字template并指出所需类型来声明类时,编译器将生成类声明的显式实例化(explicit instantiation)
	声明必须位于模板所在名称空间中
	eg:	template ArrayTP<string,100>;//generate ArrayTP<string,100> class
	将ArrayTP<string,100>声明为一个类
	在这种情况下虽然没有创建或提及类对象,编译器也将生成类声明包括方法定义
	和隐式实例化一样,也将根据通用模板来生成具体化
3.显式具体化
	显式具体化(explicit specialization)是特定类型(用于替换模板中的通用类型)的定义
	有时需要为特殊类型实例化,对模板进行修改,使其行为不同,这种情况下可以创建显式具体化
	eg:	template <class T>
		class SortedArray//存储排序后的数组类,插入时排序
		{
			...
		};
		T为int可以进行>比较,为类时,类重载了>操作符也可用,如果T为char *则不可用
		这将按字符串地址排序,应使用strcmp进行字母排序
		这要求类使用strcmp而不是>进行排序,这时可以提供一个显式具体化模板
		这将采用为具体类型定义的模板,而不是通用模板
	当具体化版本和通用版本都和实例化请求匹配时,编译器将使用具体化版本
	eg:	tempalte <> class ClassName<specialized-type-name>{...};
		tempalte <> class SortedArray<char *>
		{
		...//use strcmp to sort
		};
		SortedArray<int> scores;//use general definition
		SortedArray<char *> dates;//use specialized definition
4.部分具体化
	(1)C++还允许部分具体化(partial specialization),即部分限制模板的通用性
		eg:	可以给类型参数之一指定具体的类型
			//general template
			tempalte <class T1,class T2>
			class Pair
			{
			...
			};
			//specialization with T2 set to int
			template <class T1> class Pair<T1,int>{...};
		template关键字后的<>中是没有具体化的类型参数
		上述声明将T2具体化为int,T1没有具体化
	(2)如果指定所有类型将导致<>为空,这将导致显式具体化
		eg:	//specialization with T1 and T2 set to int
			template <> class Pair<int,int>{...};
	(3)如果有多个模板可供选择,编译器将选择具体化程度最高的模板
		eg:	Pair<double,double> p1;//use general Pair tempalte
			Pair<double,int> p2;//use Pair<T1,int> partial specialization
			Pair<int,int> p3;//use Pair<int,int> explicit specialization
	(4)可以通过为指针提供特殊版本来部分具体化现有的模板
		eg:	tempalte <class T>//general version
			class Feeb{...};
			template <class T *>//pointer partial specialization
			class Feeb{...//modify code};
			如果提供的类型不是指针,编译器将使用通用版本
			如果提供的类型是指针,编译器将使用部分具体化版本
			Feeb<char> fb1;//use general Feeb tempalte,T is char
			Feeb<char *> fb2;//use Feeb T * specialization,T is char
			如果没有具体化,第二个参数将使用通用版本,T转换为char *
			如果进行了部分具体化,将使用部分具体化版本,T转换为char
	(5)部分具体化使得可以设置各种限制
		//general tempalte
		tempalte <class T1,class T2,class T3> class Trio{...};
		//specialization with T3 set to T2
		tempalte <class T1,class T2> class Trio<T1,T2,T2>{...};
		//specialization with T3 and T2 set to T1 *
		tempalte <class T1> class Trio<T1,T1 *,T1 *>{...};
		根据上述声明编译器将作出如下选择
		Trio<int,short,char *> t1;//general version
		Trio<int,short> t2;//use Trio<T1,T2,T2>
		Trio<char,char *,char *> t3;//use Trio<T1,T1 *,T1 *>

14.4.7 成员模板
	(1)C++模板支持的特性:模板可用作结构、类或模板类的成员
		要完全实现STL的设计,必须使用这项特性
		eg:	template <typename T>
			class beta
			{
			private:
				template <typename V>//template member
				class hold
				{
				private:
					V val;
				public:
					hold(V v = 0):val(v){}
					void show()const{cout << val << endl;}
					V Value()const{return val;}
				};
				//template object
				hold<T> q;
				hold<int> n;
			public:
				beta(T t,int i):q(t),n(i){}
				template <typename U>//template method
				U blab(U u,T t){return (n.Value() + q.Value()) * u / t;}
				void Show()const{q.show();n.show();}
			};
			编译器接收类外部定义模板成员
			//out class definition template member
			template <typename T>
			class beta1
			{
			private:
				template <typename V>//template member
				class hold1;
				//template object
				hold1<T> q;
				hold1<int> n;
			public:
				beta1(T t,int i):q(t),n(i){}
				template <typename U>//template method
				U blab1(U u,T t);
				void Show()const{q.show();n.show();}
			};
			//member definition
			template <typename T>
			template <typename V>
			class beta1<T>::hold1
			{
			private:
				V val;
			public:
				hold1(V v = 0):val(v){}
				void show()const{cout << val << endl;}
				V Value()const{return val;}
			};
			//member definition
			template <typename T>
			template <typename U>
			U beta1<T>::blab1(U u,T t)
			{
				return (n.Value() + q.Value()) * u / t;
			}
			
		
		
	
		
		
	
		
	
	

			
			
			