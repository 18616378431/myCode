第十七章 输入、输出和文件

1.C++输入和输出(简称I/O),使用istream和ostream进行标准输入和输出,使用ifstream和ofstream进行文件输入和输出
2.用于文件输入和输出的C++工具都是基于cin和cout所基于的基本类定义

17.1 C++输入和输出概述
1.对数计算机语言的输入和输出是以语言本身为基础实现的,BASIC、Pascal等语言的关键字列表中有输出关键字
    PRINT、Writeln都是语言词汇表的组成部分,C/C++都没有将输入和输出建立在语言中
    这两种语言都包括for和if关键字,但不包括与I/O有关的内容
    C语言最初是将I/O留给了编译器实现人员,这样编译器实现人员可自由设计I/O函数
    使之最适合于目标计算机的硬件要求
    实际上,多数实现人员都把I/O建立在最初为UNIX环境开发的库函数基础之上
    ANSI正式承认这个I/O软件包时,将其称为标准输入/输出包,并将其作为标准C库不可或缺的组成部分
    C++也认可这个软件包,熟悉stdio.h文件中声明的C函数,则可在C++程序中使用它们(cstdio)
    不过C++依赖于C++的I/O解决方案,而不是C语言的I/O解决方案
    前者是在头文件iostream(iostream.h)和fstream(fstream.h)中定义一组类
    这个类库不是正式语言定义的组成部分(cin和istream不是关键字)
    计算机语言定义了如何工作(如如何创建类)的规则,但没有定义要按照这些规则创建哪些东西
    正如C实现自带了一个标准库函数一样,C++也自带了一个标准类库
    首先,标准类库是一个非正式的标准,只是由头文件iostream和fstream中定义的类组成
    ANSI/ISO C++标准委员会决定把这个类正式作为一个标准类库,并添加一些其它标准类,如STL
    先看看C++I/O概念框架

17.1.1 流和缓冲区
1.C++程序把输入和输出看做字节流
    输入时,程序从输入流中抽取字节,输出时,程序将字节插入到输出流中
    对于面向文本的程序,每个字节代表一个字符,字节可以构成字符或数值数据的二进制表示
2.输入流中的字节可能来自键盘,也可能来自存储设备,硬盘或其他设备
    同样,输出流中的字节可以流向屏幕、打印机、存储设备或其他程序
    流充当了程序和流源或流目标之间的桥梁
    这使得C++程序可以用相同的方式对待来自键盘的输入和来自文件的输入
    C++程序只是检查字节流,而不需要知道字节来自何方
    通过使用流,C++程序处理输出的方式将独立于其去向,因此管理输入包含两步:
    [1]将流与输入去向的程序关联起来
    [2]将流与文件连接起来
    输入流需要两个连接,每端各一个
    文件端连接提供了流的来源,程序端将流的流出部分转存到程序中(文件端连接可以是文件、设备(键盘))
    对输出的管理包括将输出流连接到程序以及将输出目标与流关联起来
3.通常,通过使用缓冲区可以更高效地处理输入和输出
    缓冲区是用作中介的内存块,它是将信息从设备传输到程序或从程序传输给设备的临时存储工具
    通常像磁盘驱动器这样的设备以512字节(或更多)的块为单位来传输信息,而程序通常每次只能处理一个字节的信息
    缓冲区帮助匹配这两种不同的信息传输速率
    eg: 程序要计算记录在硬盘文件中的金额
        程序可以从文件中读取一个字符,处理它,再从文件中读取下一个字符,再处理,依此类推
        从文件中每次读取一个字符需要大量的硬件活动,速度非常慢
        缓冲方法则从磁盘上读取大量信息,将这些信息存储在缓冲区中,然后每次从缓冲区中读取一个字节
        因为从内存中读取单个字节的速度比从硬盘上读取快很多,所以这种方法更快,也更方便
        当然,到达缓冲区末尾后,程序将从磁盘上读取另一块数据
        输出时,程序首先填满缓冲区,然后把整块数据传递给硬盘,并清空缓冲区,以备下一批输出使用
        这被称为刷新缓冲区(flushing the buffer)
4.键盘输入每次提供一个字符,程序无需缓冲区来帮助匹配不同的数据传输速率
    对键盘输入进行缓冲可以让用户在将输入传输给程序之前返回并更正
    C++通常在用户按下回车键时刷新输入缓冲区
    对于屏幕输出,C++程序通常在用户发送换行符时刷新缓冲区
    程序也可能在其他情况下刷新输入,输入即将到来时,这取决于实现
    当程序到达输入语句时,它将刷新输出缓冲区中当前所有的输出
    与ANSI C一致的C++实现是这样工作的

    





    
