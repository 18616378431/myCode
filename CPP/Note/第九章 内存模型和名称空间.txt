第九章 内存模型和名称空间

9.1单独编译
1.可以将大型程序的模块单独进行编译，并将其与其他文件的编译版本链接
2.程序文件切分:
	[1]头文件:包含结构声明和使用这些结构的函数原型
	[2]源代码文件:包含与结构有关的函数代码
	[3]源代码文件:包含调用与结构相关的函数的代码
3.头文件中常包含的内容:
	[1]函数原型
	[2]使用#define或const定义的符号常量
	[3]结构的声明
	[4]类的声明
	[5]模板的声明
	[6]内联函数
4.包含头文件路径:
	[1]使用尖括号包含文件，c++编译器将在存储标准头文件的目录查找#include<coordin.h>
	[2]使用双引号,编译器将首先查找当前的工作目录或源代码目录#include"coordin.h"
		如果没有找到将在标准位置查找
	[3]包含用户自定义的头文件应使用双引号#include"HeadName.h"
5.不要使用#include命令包含源代码文件，否则将导致多重声明
6.在IDE中不要将头文件加入到工程列表中，也不要在源代码文件中使用#include命令包含其他源代码文件
7.多源文件编译过程:
	[1]在gcc/g++编译其中编译多个源文件组成的程序:gcc/g++ file1.cpp file2.cpp
	[2]预处理器将包含的文件与源代码结合
	[3]编译器创建每个源代码文件的对象代码文件(win是.obj,*nix是.o)
	[4]链接程序将对象代码文件与库代码和启动代码结合在一起,生成可执行文件
8.在一个文件中只能包含同一个头文件一次
9.使用预处理常量定义方式避免文件多次包含:
	eg:	#ifndef COORDIN_H_
		#define COORDIN_H_
		//头文件声明内容
		#endif
10.由不同编译器生成的二进制模块(对象文件)可能无法正常链接,
	两个编译器可能为同一个函数生成不同的修饰名称,
	名称不同将使链接器无法将一个编译器生成的函数调用与另一个编译器生成的函数定义匹配,
	在链接编译模块时,要确保所有对象文件都由同一个编译器生成,
	如果有源代码可以使用自己的编译器重新编译以消除链接错误
	
9.2 存储持续性、作用域和链接性
1.C++存储数据的3种方案:
	[1]自动存储持续性:在函数定义中声明的变量(函数参数),存储持续性为自动的，
		C++有2种存储持续性为自动的变量
	[2]静态存储持续性:在函数外定义的变量和使用关键字static定义的变量，存储持续性为静态的
		它们在程序的整个运行过程中都存在，C++有3种存储持续性为静态的变量
	[3]动态存储持续性:用new操作符分配的内存将一直存在，直到使用delete操作符将其释放或
		程序结束为止，这种内存的存储持续性为动态，称为自由存储

9.2.1 作用域和链接
1.作用域:描述了名称在文件的多大范围可见,
	在文件中函数定义之前定义的变量可以在当前文件中的所有函数使用
2.链接性:描述了名称如何在不同单元间共享
	链接性为外部的名称可在文件间共享，链接性为内部的名称只能由一个文件中的函数共享
3.自动变量的名称没有链接性，它们不能共享
4.局部变量:作用域为局部的变量只在定义它的代码块中可用,代码块为花括号括起的一系列语句
5.全局变量:文件作用域的变量在定义位置到文件结尾都可用
6.自动变量的作用域为局部,静态变量的作用域为全局还是局部取决于定义的方式
7.函数原型作用域中使用的名称只在包含参数列表的括号中可见，
	也是函数原型中可以省略形参名称的原因
8.在类中声明的成员作用域为整个类
9.在名称空间中声明的变量作用域为整个名称空间,全局作用域是名称空间作用域的特例
10.C++函数的作用域可以是整个类或名称空间，不能是局部的
11.不同的C++存储方法是通过存储持续性、作用域和链接性来描述的

9.2.2 自动存储持续性
1.默认情况下，函数中声明的参数和变量的存储持续性为自动,作用域为局部，没有链接性
	程序执行的这些变量所属的代码块时，为变量分配内存，函数结束时变量所占内存将释放
2.如果在代码块中定义了变量，变量的存在时间和作用域将被限制在该代码块中
3.在内部代码块定义了和外部代码块中的变量同名的变量，
	内部代码块的变量将暂时隐藏掉外部代码块中的变量，新的定义隐藏的以前的定义,
	在程序离开该代码块时，原来的定义又重新可见
4.自动变量将只在包含它们的函数或代码块中可见
5.可以使用C/C++auto关键字指定变量的存储类型
6.可以使用任何在声明时其值为已知的表达式初始化自动变量
	eg:int x = 1;int y = 2*x;
7.函数中的形参及定义的变量存储在栈中,多个变量存储在相邻的内存单元中
	程序使用完后，将其从栈中删除
	栈的长度取决于实现，编译器通常提供改变栈长度的选项
8.程序使用两个指针来跟踪栈，
	一个指针指向栈底(栈的开始位置)，一个指针指向栈顶(下一个可用内存单元,即已分配的内存单元的下一个单元)，
	函数结束时，栈顶指针被重置为指向函数调用前的位置，从而释放新变量使用的内存单元，之前的值没有删除，但不再与函数形参关联	
	栈是[后进先出]的，最后加入到栈中的变量首先弹出，这种设计简化了参数的传递
	函数调用将其参数的值放在栈顶，然后重新设置栈顶指针，被调用函数根据形参描述来确定每个参数的地址
		eg:函数调用时，先将参数值按顺序传递到栈中，函数执行时将形参名称与压入栈中的值关联，
			[函数结束时，栈顶指针重新指向以前的位置，新值没有被删除，但不再被标记,
			它们所占据的空间将被下一个函数调用时压入栈中的值所使用,先前的值不会被删除，
			后压入栈的中值将覆盖先前的值]
9.寄存器变量:和C语言一样，C++也支持register关键字声明局部变量,寄存器变量，是另一种形式的自动变量
	其存储持续性为自动，组用于为局部，没有链接性
10.register关键字提醒编译器，使用CPU寄存器存储变量，而不是栈,从而提供对变量的快速访问
	声明寄存器变量,eg:register int count_fast;
	register关键字[提醒]编译器，意味着编译器可能无法满足这个请求，寄存器被占用或
		寄存器无法存储所请求的类型
11.CPU访问寄存器中的变量比访问堆栈中的变量速度要快
12.变量被存储在寄存器中，则没有内存地址，因此不能将地址操作符用于寄存器变量,
	声明中使用register关键字这种限制即生效,即使编译器没有使用寄存器来存储变量
13.常规局部变量、使用auto声明的局部变量和使用register声明的局部变量，
	存储持续性都是自动的，作用域是局部的，没有链接性
14.声明变量时没有使用关键字，默认为auto，通常处理这种变量的方式是将其放在栈中，
	使用register关键字意味着该变量将被频繁使用，编译器可能选择使用堆栈之外的方式来存储，
	例：使用寄存器存储register关键字声明的变量
	
9.2.3 静态持续变量
1.静态存储链接性:和C语言一样，C++为静态存储持续性变量提供了三种链接性
	[1]外部链接性
	[2]内部链接性
	[3]无链接性
	这三种链接性在程序的整个运行期间都存在
2.静态变量的数目在程序运行期间是不变的，程序不需要使用堆栈来管理静态变量
	编译器将分配固定的内存块来存储所有的静态变量
3.如果没有显式地初始化静态变量，编译器就将静态变量设置为0，
	默认情况下，静态数组和结构将每个元素或成员的所有为都设置为0
4.创建静态持续变量:
	[1]创建链接性为外部的静态持续变量，在代码块外部声明
		eg:int global = 1000;//外部链接性，静态持续变量
	[2]创建链接性为内部的静态持续变量，在代码块外部声明，并使用static关键字
		eg:static int one_file = 50;//内部链接性，静态持续变量
	[3]创建没有链接性的静态持续变量，在代码块内声明，并使用static关键字
		eg:	void func()
			{
				static int count = 0;//没有链接性的静态持续变量
			}
5.链接性为外部的变量可以在其他文件中使用,内部链接性的变量(static关键字声明的变量并在代码块外的),
	只能在定义位置到文件末尾可见,无链接性的变量静态变量只在代码块内可见，在程序未执行带代码块时，
	无链接性的静态变量也存在于内存中
6.静态持续变量共有的初始化特征:
	[1]未被初始化的静态变量所有位都被初始化为0
	[2]只能使用常量表达式初始化静态变量(字面值常量、const常量、enum常量、sizeof操作符)
===============================静态持续性、外部链接性==============================
7.链接性为外部的变量通常简称为外部变量，它们的存储持续性为静态，作用域为整个文件
8.可以在外部变量定义后的所有函数中使用该变量,也称为全部变量
9.如果代码块中定义了与外部变量同名的自动变量，程序执行到其所属函数时，
	自动变量将隐藏同名外部变量
10.可以使用extern关键字重新声明以前定义过的外部变量,通过以前被外部定义的名称使用该变量,
	可以使用extern关键字在代码块中访问外部变量,
	使用作用域解析操作符::访问被隐藏的外部变量,::warming
11.double warming = 0.3;外部的声明称为定义声明或定义，它给变量分配存储空间
	extern double warming;称为引用声明或声明，它不给变量分配存储空间，因为他引用已有的变量
	只能在引用其他地方定义的变量时使用关键字extern，
	该声明支出使用外部定义的变量，在引用声明中的类型应与定义中声明相同，
	不能在引用声明中初始化变量,仅能在定义声明中初始化全局变量
12.作用域解析操作符(::)，当该符号放在变量前面时，意味着使用变量的全局版本
===============================静态持续性、内部链接性==============================
13.将static关键字用于作用域为文件作用域的变量时，该变量的链接性为内部
	链接性为内部的变量只能在其所属文件中使用,外部链接变量可以在其他文件中使用，
14.外部链接变量有且只有一个文件中包含了该变量的外部定义，其他文件中使用，
	必须在引用声明中使用extern关键字
	eg:int process_status = 0;//定义声明
		extern int process_status;//引用声明
15.如果文件中定义的静态内部变量与其他文件中定义的全局变量名称相同，
	则静态内部变量将在当前文件中隐藏其他文件的外部变量
16.在多文件程序中，可以在一个文件中定义一个外部变量，
	使用该变量的其他文件中必须使用extern关键字声明它
17.使用作用域为外部的全局变量在多文件程序的不同部分共享数据，
	使用作用域为内部的静态变量在一个文件内的多个函数间共享数据
===============================静态持续性、无链接性==============================
18.创建局部静态变量:使用static关键字修饰在代码块中定义的变量
	在代码块中使用static关键字将导致局部变量的存储持续性为静态,意味着该变量只在代码块中可见，
	但它在代码块不处于活动状态时仍然存在
19.如果初始化了静态局部变量，程序只在启动时进行一次初始化，下次调用函数时将不会被再次初始化

9.2.4 说明符和限定符
1.存储说明符或cv-限定符:一些被称为存储说明符或cv-限定符的c++关键字提供了其他有关存储的信息
	[1]auto		//自动变量
	[2]register	//寄存器变量
	[3]static	//静态变量
	[4]extern	//引用声明变量(引用其他地方定义的变量)
	[5]mutable	//根据const来解释
2.在同一个声明中不能使用多个说明符
3.cv-限定符:c代表const,v代表volatile,称为cv-限定符
	[1]const	//表明内存被初始化后不能再被修改
	[2]volatile	//表明即使程序代码没有对内存单元进行修改,其值也可能发生变化
4.volatile:该关键字是为了改善编译器的优化能力,程序在几条语句中两次使用了某个变量的值,
	编译器可能不是让程序查找这个值两次,而是将这个值缓存到寄存器中,
	这种优化假设变量的值在两次使用中不会变
	[1]如果不将变量声明为volatile,编译器将进行这种优化
	[2]将变量声明为volatile,则告诉编译器不进行这种优化
5.mutable:关键字指出即使结构(或类)变量为const,其某个成员也可以被修改
	变量的const限定符使得结构的成员不可修改,mutable关键使用其声明的变量不受这种限制
6.const对全局变量的影响:默认情况下全局变量的链接性为外部的,const使全局变量的链接性为内部,
	类似于static关键字的作用,由于链接性为内部的,因此可以在所有文件中使用相同的声明,
	内部链接性还意味着每个文件都有自己的一组常量,而不是所有文件共享一组常量,
	每个定义都是所属文件私有的,这就是为声明能够将常量定义放在头文件中的原因,
7.希望声明的常量的链接性为外部的,可以在常量声明前加上extern关键字并进行初始化,
	以覆盖默认的内部链接性
	eg:extern const int states = 50;
	这种情况下,其他文件必须使用extern关键字来引用声明这个外部变量
	[1]与常规外部变量不同,定义常规外部变量不必使用extern关键字,
		但在使用该变量的其他文件中必须使用extern关键字
	[2]与常规变量不同的是可以初始化extern const变量,因为const变量必须初始化
8.在代码块中声明const时,其作用域为代码块,仅当程序执行到该代码块时,该常量才是可用的,
	意味着在函数或代码块中创建常量时,不必担心其名称与其他地方定义的常量发生冲突

9.2.5 函数和链接性
1.和变量一样,函数也有链接性,可选择的范围比变量小
2.C/C++都不允许在函数中定义另外一个函数
3.所有函数的存储持续性都自动为静态,即整个程序执行期间都一直存在
4.默认情况下,函数的链接性为外部的,可以在文件间共享
5.可以使用extern关键字来指出函数是在另外一个文件中定义的,这是可选的
	要让程序在另外一个文件中查找函数,该文件必须做为程序的组成部分被编译,
	或者是由链接程序搜索的库文件
6.可以使用static关键字使函数的链接性为内部的,使之只能在一个文件中使用,
	必须同时在原型和定义中使用static关键字
7.和变量一样,在定义静态函数的文件中,静态函数将覆盖外部定义,即使在外部定义了同名函数,
	该文件仍将使用静态函数
8.单定义规则:对于每个非内联函数,程序中只能包含一个定义,对于链接性为外部的函数,
	在多文件程序中,只能由一个文件包含了函数定义,但使用该函数的每个文件都应包含其函数原型
9.内联函数不受单定义规则的约束,这使得能够将内联函数定义放在头文件中,
	这样包含的头文件的每个源文件都有内联函数的定义,
	C++要求同一个函数的所有内联定义都必须相同
10.查找函数定义:如果文件的函数原型指出函数为静态的,则编译器将只在该文件中查找函数定义;
	否则,编译器(链接程序)将在所有程序文件中查找,如果在程序文件中没有找到,
	编译器将在库中搜索,如果定义了一个与库函数同名的函数,编译器将使用自定义的函数,
	而不是库函数,

9.2.6 语言链接性
1.语言链接性:另一种形式的链接性也对函数有影响
2.链接程序要求每个不同的函数都有不同的符号
3.C语言链接性:C语言编译器可能将spiff的函数名翻译为_spiff,这种方法被称为C语言链接性
4.C++语言链接性:在C++中,同一个名称可能对应多个函数,必须将这些函数翻译为不同的符号名称,
	因此C++编译器执行名称矫正或名称修饰,为重载函数生成不同的符号名称，
	eg:spiff(int)转换为_spiff_i,将spiff(double,double)转换为_spiff_d_d,
	这种方法被称为C++语言链接性
5.链接程序寻找与C++函数调用匹配的函数时,使用的方法与C语言不同
	eg:spiff(22);在C库文件中的符号为_spiff,C++查询约定是查找符号名称_spiff_i
6.为了解决在C++调用C库函数的问题,可以用函数原型指出要使用的约定
	eg:
	[1]extern "C" void spiff(int);	使用C函数名称查找约定,C语言链接性
	[2]extern void spiff(int);		使用C++函数名称查找约定,C++语言链接性
	[3]extern "C++" void spiff(int);使用C++函数名称查找约定,C++语言链接性

9.2.7 存储方案和动态内存
1.动态内存:C++用来为变量分配内存的5种方案,
	不适用于使用C++操作符new(或C函数malloc)分配的内存,这种内存被称为动态内存=
2.动态内存由new和delete控制,不由作用域和链接性规则控制,因此可以在一个函数中分配内存,
	在另一个函数中将其释放
3.与自动内存不同,动态内存不是LIFO,其分配和释放顺序取决于new和delete的使用方式
4.虽然存储方案概念不适用与动态内存,但适用于用来跟踪动态内存的自动和静态指针变量
5.由new分配的内存一直存在,直到使用delete将其释放或程序结束自动释放
6.使用new分配内存的语句必须位于函数中,因为只能使用常量表达式初始化静态存储变量

9.3 布局new操作符
1.new操作符负责在堆中分配内存
2.布局new操作符:new负责在堆中寻找符合要求的内存块,
	new操作符还有另一种变体,称为布局new操作符,它能够让你指定要使用的位置
3.要使用布局new的特性,需要包含头文件new,提供了这种版本的new操作符的原型,
	然后将new用于提供了所需地址的参数,除需要指定参数外,句法与常规new相同,
	使用布局new操作符,变量后面可以有方括号也可以没有
	eg:	#include<new>
		buffer1、buffer2为全局静态char数组
		[1]常规new操作符
		new chaff;	//在堆中放置一个结构体
		new int[20];//在堆中放置一个数组
		[2]布局new操作符
		new (buffer1) chaff;	//将结构体放置在buffer1中,从buffer1中分配空间给chaff
		new (buffer2) int[20]	//将数组放置在buffer2中,从buffer2中分配空间给数组
		buffer1、buffer2为指定地址
4.布局new操作符使用给定的地址,不区分哪些内存被使用,也不查找未使用的内存块
5.delete只能用于这样的指针:指向常规new操作符分配的堆内存

9.4 名称空间
1.在C++中名称可以使变量、函数、结构、枚举、类以及类和结构成员,不同库使用的相同的名称,
	就出现了名称空间问题
2.C++提供了名称空间工具,以解决不同库之间的名称冲突问题,更好地控制名称的作用域

9.4.1 传统的C++名称空间
1.声明区域:是可以在其中声明变量的区域,即变量声明的位置,决定了变量的作用域
2.潜在作用域:变量的潜在作用域从声明点开始,到其声明潜在作用域比声明区域小,
	变量必须定义后才能使用
3.作用域:变量不是在其潜在作用域内的所有位置都是可见的,可能被在嵌套声明区域中声明的变量隐藏,
	函数中的局部变量可隐藏文件作用域的全局变量,
	变量在程序中的可见范围叫做变量的作用域
4.C++关于全局变量和局部变量定义了一种名称空间层次,每个声明区域都可以声明名称,
	这些名称独立于在其他声明区域声明的名称
	
9.4.2 新的名称空间特性
1.C++通过定义一种新的声明区域来创建命名的名称空间,提供了一个声明名称的区域,
	一个名称空间中声明的名称不会与另一个名称空间声明的相同名称发生冲突
2.声明名称空间使用关键字:namespace
	eg:namespace test{//声明各种变量及函数}
3.名称空间可以是全局的,也可以位于另一个名称空间中,但不能位于代码块中
4.在名称空间中声明的名称的链接性是外部的
5.除了用户定义的名称空间,还存在另一个名称空间-全局名称空间,对应于文件级声明区域,
	意味着全局变量位于全局名称空间中
6.名称空间中的声明和定义规则同全局声明和定义规则是相同的
7.名称空间是开放的,可以将名称加入到已有的名称空间中
	eg:之前已经创建了名称空间Jack,使用下面方法向Jack中添加新的名称
		namespace Jack{
			//在一个文件中声明的名称空间含有函数原型
			//可以在另一个文件中的相同的名称空间中添加函数定义
			void function();
		}
8.通过域解析操作符(::)访问名称空间中的名称
	eg:Jack::pail = 10;
9.未被装饰(不包含名称空间)的名称被称为未限定的名称,包含名称空间的名称被称为限定的名称
================================using声明和using编译指令================================
10.using声明使特定标识符可用,using编译指令使整个名称空间可用
11.using声明由被限定的标识符和前面的using关键字组成
	eg:using Jack::fetch;
12.using声明将特定的名称添加到它所属的声明区域中,
	using声明就是将名称空间的名称引入到using声明的区域中,成为local变量,
	通过using声明引入的变量和普通变量一样会覆盖同名全局变量,
	在函数外面使用using声明,将把名称添加到全局名称空间中
13.using声明使一个名称可用,using编译指令使整个名称空间可用
14.using编译指令由名称空间的名称和前面的using namespace组成
	eg:using namespace Jack;
15.在全局声明区域中使用using编译指令将使该名称空间的名称全局可用,
	在函数中使用using编译指令将使该名称空间的名称在该函数中可用
================================using声明和using编译指令区别==========================
16.using声明和using编译指令的区别:
	[1]如果某个名称在函数中已经存在,则不能用using声明导入相同的名称
	[2]使用using编译指令,将进行名称解析
	[3]using编译指令导入一个在函数中已经声明的名称,局部声明将隐藏名称空间中的名称,
		就像局部变量隐藏全局变量一样
		eg:可以使用Jill:Hill访问被隐藏的名称空间中的名称
			使用作用域解析操作符::访问被隐藏的全局变量
	[4]如果名称空间和声明区域有相同的名称,使用using声明导入名称空间中的名称,
		则这两个名称将发生冲突,使用using编译指令导入时,局部版本将隐藏名称空间版本
	[5]使用using声明比使用using编译指令更安全,因为using声明将只导入指定的名称
	[6]using编译指令导入所有名称,包含不需要的名称,如果与局部名称发生冲突,
		局部版本将覆盖名称空间版本
	[7]名称空间的开放,使得名称空间可能位于多个地方,这使得难以知道添加了哪些名称
	[8]建议使用using声明
		eg:std::cout;或using std::cout;
		不建议
		eg:using namespace std;//在文件头部或函数中

17.名称空间可以嵌套使用:
	eg:namespace elements
	{
		namespace fire
		{
			int flame;
		}
		float water;
	}
	使用flame=>elements::fire::flame;
	使用using编译指令使内部的名称空间可用=>using namespace elements::fire;
18.可以在名称空间中使用using编译指令和using声明:
	eg:namespace myth
	{
		using Jill::fetch;//using声明,fetch存在于名称空间myth中,可以像普通名称一样使用
		using namespace elements;//using编译指令
		using std::cout;//using声明
		using std::cin;//using声明
	}
	访问名称空间中使用using声明声明的名称=>myth::fetch;//和使用普通名称相同
19.using编译指令是可传递的:
	eg:将using编译指令用于myth,相当于
		using namespace myth;
		using namespace elements;
20.可以给名称空间起别名:
	eg:namespace my_very_favorite_things{...};
		创建别名:
		namespace mvft = my_very_favorite_things;
		可以使用这种技术简化嵌套使用的名称空间
		namespace MEF = myth::elements::fire;
		using MEF::flame;

21.可以通过省略名称空间的名称创建未命名的名称空间,和使用using编译指令一样,
	这样的名称空间的潜在作用域为声明处起至可声明区域结尾
	eg:namespace 
	{
		int ice;
		int bandycoot;
	}
22.不能在未命名的名称空间所属文件之外使用该名称空间中的名称,
	这种方法可以替代链接性为内部的静态变量,
	C++不建议在全局作用域中和名称空间中使用static关键字
	eg:static int x;//链接性为内部的静态变量
		使用未命名的名称空间代替:
		namespace
		{
			int x;
		}

9.4.3 名称空间范例
1.名称空间中声明的函数的作用域为整个名称空间,因此函数原型和定义必须位于同一个名称空间
2.如果函数有重载,using声明将导入所有版本
	eg:using debts::showDebt;
3.using声明只使用名称,在导入函数时只使用了名称,一次函数的所有版本都将被导入
4.可以直接使用名称空间名称加作用域解析操作符访问名称空间中的名称

9.4.4 名称空间及其前途
	[1]使用在已命名的名称空间中声明的变量,而不是使用外部全局变量
	[2]使用在已命名的名称空间中声明的变量,而不是使用静态全局变量
	[3]如果开发了一个函数库或类库,将其放在一个名称空间中
		标准库函数位于std名称空间中
	[4]仅将using编译指令做为将旧代码转换为使用名称空间的权宜之计
	[5]不要在头文件中使用using编译指令
		在头文件中使用using编译指令,掩盖了要让哪些名称可用,包含头文件的顺序影响程序的行为,
		要使用using编译指令,应将其放在所有预编译指令#include之后
	[6]导入名称时,首选使用using声明或作用域解析操作符(::)
	[7]对于using声明,首选将其作用域设置为局部而不是全局
	




	
	
	
	
	
	