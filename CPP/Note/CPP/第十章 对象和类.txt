第十章 对象和类
1.面向对象编程(OOP)是一种特殊的、设计程序的概念方法
2.OOP的重要特性:
	[1]抽象
	[2]封装和数据隐藏
	[3]多态
	[4]继承
	[5]代码的可重用性
	
10.1 过程性编程和面向对象编程
1.过程性编程:首先考虑要遵循的步骤,然后考虑如何表示这些数据
2.面向对象编程:从用户角度考虑对象,描述对象所需的数据及描述用户与数据交互所需的操作

10.2 抽象和类
1.用户定义类型:C++中,指实现抽象接口的类设计

10.2.1 类型是什么
1.指定基本类型完成了三项工作:
	[1]决定数据对象需要的内存数量
	[2]决定如何解释内存中的位
	[3]决定可使用数据对象执行的操作或方法
2.内置类型有关操作的信息被内置到编译器中
3.C++中定义用户自定义类型时,必须自己提供这些信息,
	根据实际需求定制的数据类型具有强大功能和灵活性

10.2.2 C++中的类
1.类是一种将抽象转换为用户定义类型的C++工具,它将数据表示和操纵数据的方法组合成一个简洁的包
2.类规范由两部分组成:
	[1]类声明:以数据成员的方式描述数据部分,以成员函数(方法)的方式描述公有接口
	[2]类方法定义:描述如何实现类成员函数
3.什么是接口:
	[1]接口是一个共享框架,供多个系统交互时使用
	[2]对于类,我们说公共接口.在这里,公众(public)是使用类的程序,交互系统由类对象组成,
		接口由编写类的人提供的方法组成,接口让程序员能够编写与类对象交互的代码,
		从而让程序能够使用类对象,类设计禁止公共用户直接访问类,但公众可以通过public
		方法访问类成员,要使用类必须了解其公共接口,要编写类必须创建公共接口
4.C++关键字class指出花括号中的代码定义了一个类设计,class后跟的名称为类的名称,
	class声明使得我们可以声明className类型的变量,称为类对象或实例
		eg:Stock sallory;//类对象(类实例)
5.类中要存储的数据以类数据成员的形式出现,要执行的操作以类函数成员的形式出现
6.成员函数可以直接定义,也可以声明函数原型,在其他地方进行定义
7.private、public描述了对类成员的访问控制,使用类对象的程序可以直接访问公有部分,
	只能通过公有成员函数访问对象的私有成员
8.数据隐藏:防止程序直接访问数据被称为数据隐藏,确保了数据的完整性
	数据隐藏(将数据放在类的私有部分)是一种封装,将实现细节隐藏在私有部分中,
	开发者无需了解数据是如何被表示的,将实现细节从接口设计中分离
9.类成员可以是数据类型也可以是函数
10.类设计尽可能将公有接口与实现细节分开,公有接口表示设计的抽象组件
11.封装:将实现细节放在一起并将将它们与抽象分开被称为封装
	eg:将类函数定义和类声明放在不同的文件中
12.将数据表示和函数原型放在一个类声明中,
	(而不是像C语言一样将结构体定义及其操作函数原型放在一个文件中),
	通过将所有内容放在一个类声明中,来使描述称为一个整体,
	让数据成员表示为私有,使得数据只能被授权的函数访问
13.类成员的访问控制:无论类成员是数据成员还是成员函数,都可以在公有部分或私有部分声明,
	但由于隐藏数据是OOP的主要目标之一,因此数据项通常放在私有部分,
	组成类接口的成员函数通常放在公有部分
14.private是类对象的默认访问控制,可以不用声明
	eg:class World
		{
			float mass;//隐式private
		public:
			void tellall(void);
		}
15.C++对结构进行了扩展,使其具有与类相同的特性,
	唯一的区别是结构的默认访问控制类型是public,类是private,
	通常使用类来实现描述,而把结构限制为只表示纯粹的数据对象或没有私有部分的类
	
10.2.3 实现类成员函数
1.成员函数的定义与常规函数定义非常相似,它们有函数头和函数体,也可以有返回类型和参数,
	但是它们还有两个特殊的特征:
	[1]定义成员函数时,使用作用域解析操作符(::)标识函数所属类
	[2]类方法可以访问类private组件
	eg:使用作用域解析操作符标识函数所属类:
		void Stock::update(double price);
		意味着update函数是Stock类的成员,着不仅标识着update为成员函数,
		我们可以将另一个类的成员函数也命名为update,
==========================成员函数的第一个特征============================
2.作用域标解析操作符确定了方法定义对应的类的身份,成员函数具有类作用域(class scope),
	同一个类的方法不必使用作用域解析操作符就可以使用同类中的其他方法,
	因为它们同属于一个类,类中的方法互相可见,在类声明和方法定义之外使用类方法时,
	需要采取特殊的措施
3.类方法的完整名称包括类名
	eg:Stock::update()是函数的限定名称
		简单的update()是全名的缩写(非限定),只能在类作用域中使用
=========================成员函数的第二个特征==============================
4.类方法可以访问类的私有成员
5.使用非成员函数访问私有成员,编译器将报错(友元函数例外)
6.成员函数的实现可以放在单独的文件中,也可以位于类声明所在文件中,
	成员函数定义和类声明位于同一个文件中,是方法定义可以使用类声明的最简单的方法,
	可以将类声明放在头文件中,将类成员函数定义放在单独的一个源代码文件中

7.strncpy(dest,source,n);
	将source中的n个字符拷贝到dest中,source中不足n个字符,使用空字符填充
8.和cout一个cerr也是一个ostream对象,区别在于,操作系统重定向,只影响cout,不影响cerr.
	cerr对象用于错误消息,因此将程序输出重定向到文件,并且发生了错误,
	则屏幕上仍会出现错误消息.
	在unix系统中,可以分别对cout和cerr重定向,命令行操作符>用于对cout重定向,
	操作符2>用于对cerr重定向
9.其定义位于类声明中的成员函数都将自动成为内联函数,类声明常将短小的成员函数做为内联函数
	可以在类外定义成员函数并声明为内联函数
	eg:类内使用声明原型:
		void set_tot();
		类外定义为内联函数
		inline void Stock::set_tot(){...}
10.内联函数的特殊规则要求在每个使用它们的文件中都对其进行定义
	确保内联定义对多文件程序中的所有文件都可用,将内联定义放在定义类的头文件中
	根据改写规则,在类声明中定义方法等同于用原型替换方法定义,
	然后在类声明的后面将定义改写为内联函数
11.类声明中的函数定义(默认内联),与类中声明原型,在类外将定义声明为内联是等价的
12.创建类对象:最简单的方法是声明类变量
	eg:Stock kate,joe;
13.使用对象成员函数的方法和使用结构体成员的方式一样,使用点(.)操作符
	eg:kate.show();
		joe.show();
14.对象调用成员函数时,将使用调用它的对象的数据成员
	eg:kate.show()将shares解释为kate.shares,将share_val解释为kate.share_val
		joe.show()将shares解释为joe.shares,将share_val解释为joe.share_val
15.所创建的每个对象都有自己的存储空间,用于存储其内部变量和类成员,
16.同一个类的所有对象共享同一组方法,即每种方法只有一个副本
	eg:kate.shares和joe.shares将占用不同的内存块,
		kate.show和joe.show将调用同一个方法,执行同一个代码块,
		只是将这些代码用于不同的数据
17.在OOP中,调用成员函数被称为发送消息,因此将同样的消息发送给2个不同的对象将调用同一个方法
	但该方法被用于两个不同的对象
	
10.2.4 使用类
1.C++的目标是使得使用类和使用基本内置类型(int)尽可能相同
2.要创建类对象,可以声明类变量,也可以使用new为类对象分配存储空间
3.可以将对象做为函数的参数和返回值,也可以将一个对象赋给另一个
4.C++提供了一些工具用于初始化对象,让cin、cout识别对象,在相似的类对象间进行自动类型转换

10.2.5 小结
一、指定类的第一步
1.指定类设计的第一步是提供类声明,类声明类似结构声明,可以包括数据成员和函数成员,
	声明有私有方法,在其中声明的成员只能通过成员函数进行访问,
	声明还有公有部分,在其中声明的成员可被使用类对象的程序直接访问
	通常数据成员被放在私有部分,成员函数被放在公有部分
2.公有部分构成了设计的抽象部分-公有接口,将数据封装到私有部分可以保护数据的完整性,
	被称为数据隐藏,因此C++通过类使得实现抽象、数据隐藏和封装等OOP特性很容易

二、指定类的第二步
3.指定类的第二步是实现类成员函数.
4.可以在类声明中提供完整的函数定义,而不是函数原型,通常的做法是单独提供函数定义,
	需要使用作用域解析操作符指出成员函数属于哪个类
5.要创建对象(类的实例)时,只需将类名视为类型名即可
6.类成员函数(方法)可通过类对象来调用,需要使用成员操作符句点(.)

10.3 类的构造函数和析构函数
1.C++提供了一个特殊的成员函数-类构造函数,专门用于构造新对象、将值赋给它的数据成员
	C++为这些成员函数提供了名称和使用句法,而程序员需要提供方法定义
2.构造函数的名称与类名相同,没有返回值,构造函数没有声明类型

10.3.1 声明和定义构造函数
1.构造函数没有返回类型,但可以有参数
2.构造函数原型位于类声明的公有部分
	eg:类声明中声明构造函数原型
	public:
		Stock(const char * co,int n,double pr);
	类外定义构造函数
	Stock::Stock(const char * co,int n,double pr){...}
3.程序声明对象时将自动调用构造函数
4.构造函数的参数不是类成员,而是要赋值给类成员的形参,参数名不能与类成员相同,
	为避免混淆,通常在类成员前加(m_)前缀

10.3.2 使用构造函数
1.C++提供了两种使用构造函数初始化对象的方法
	[1]显式地调用构造函数
		eg:Stock food = Stock("World",150,1.25);
	[2]隐式地调用构造函数
		eg:Stock garment("Hello",50,2.5);
	[3]与new操作符配合初始化对象
		eg:Stock *pstock = new Stock("Furry",18,19.0);
	[1],[2]两种调用构造函数的方式等价,C++每次创建对象时都将调用构造函数,
	包括new操作符动态分配内存时,
2.无法使用对象调用构造函数,因为在构造函数构造出对象之前,对象是不存在的,
	构造函数创建对象,不能通过对象来调用

10.3.3 默认构造函数
1.默认构造函数是在未提供未显式的初始化值时,被用来创建对象的构造函数
	默认构造函数是没有参数或所有参数都有默认值的构造函数
	eg:Stock stock1;//使用默认构造函数
2.没有提供构造函数,C++将自动提供默认构造函数,它是构造函数的隐式版本,不做任何工作
3.默认构造函数没有参数,因此声明中不包含值
4.当且仅当没有定义构造函数时,编译器才会提供默认构造函数
5.为类定义了构造函数,程序员就必须为类提供默认构造函数,如果提供了非默认构造函数,
	但没有提供默认构造函数,只声明却没有初始化的类对象将报错
	eg:只提供了非默认构造函数
		Stock(const char * co,int n,double pr);
		Stock stock1;//这样的声明将报错,禁止创建未初始化的对象
	如果要创建对象,而不是显式地初始化,必须定义一个不接收任何参数默认构造函数
6.定义默认构造函数的方式有两种:
	[1]给已有构造函数的所有参数提供默认值
		eg:Stock(const char * co = "Error",int n = 0,double pr = 0.0);
	[2]通过函数重载定义另一个没有参数的构造函数
		eg:Stock();
	不可以同时使用这两种方式,因为只能由一个默认构造函数
7.通常应初始化所有的对象,以确保所有成员一开始就由已知的、合理的值,
	因此默认构造函数通常给所有成员提供隐式初始值
8.在设计类时,通常应提供对所有类成员做隐式初始化的默认构造函数
9.有了默认构造函数,就可以声明对象变量,而不对它们进行显示初始化
	eg:Stock first("Concrere");//调用非默认构造函数
		Stock second();//返回Stock对象的函数
		Stock third;//隐式地调用默认构造函数

10.3.4 析构函数
1.用构造函数创建对象后,程序负责跟踪该对象,直到其过期为止
2.对象过期时,程序将自动调用一个特殊的成员函数,析构函数
3.析构函数完成清理工作
4.析构函数的名称:在类名前面加上(~)符号
	eg:~Stock();
5.和构造函数一样,析构函数可以没有返回值和声明类型,与构造函数不同的是,
	析构函数没有参数
	eg:Stock::~Stock(){...}
6.什么时候调用析构函数由编译器决定
	[1]如果创建的是静态存储类对象,则它的析构函数将在程序结束时自动调用
	[2]如果创建的是自动存储类对象,则析构函数将在执行完代码块时自动调用
		(该对象在代码块中定义)
	[3]如果对象是new操作符创建的,则它将驻留堆内存中,当使用delete释放内存时,
		其析构函数将被自动调用
	[4]程序可以创建临时对象完成特定的操作,在这种情况下,
		程序完成对该对象的使用后自动调用其析构函数
7.由于在类对象过期时将自动调用析构函数,因此必须有一个析构函数
	如果程序没有显式地定义析构函数,编译器将隐式地声明一个默认析构函数,
	并在发现导致对象被删除的代码后,提供默认析构函数的定义

10.3.5 改进Stock类
1.通常包含类声明的头文件和包含方法定义的源代码文件的文件名应相同
2.将类声明和成员函数放在不同的文件中,
	可以将接口的抽象定义(类声明)和实现细节(成员函数定义)分开
3.包含头文件时,使用双引号将在源文件所在目录搜索头文件
4.函数参数默认值只在声明原型时指定,函数实现不需再定义
5.对象赋值和显式调用构造函数会产生临时对象,将临时对象复制给变量并丢弃(调用析构函数)
6.可以将一个对象赋值给另一个同类型的对象,和结构赋值一样,默认情况下,
	给类对象赋值时,将把一个对象的成员复制给另一个
7.默认情况下,将一个对象赋给同类型的另一个对象时,
	C++将源对象的每个数据成员的内容复制到目标对象中相应的数据成员中
8.构造函数不仅仅可以初始化对象,还可以对对象重新赋值,构造函数创建一个新的临时对象,
	然后将其内容复制给对象变量,随后程序调用析构函数,删除临时对象
9.代码块中的对象变量被放在栈中,后创建的对象先删除
10.eg:	[1]Stock stock2 = Stock("Boffo Objects",2,2.0);
		[2]stock1 = Stock("Nifty Foods",10,50.0);
		第一条语句是初始化,创建有指定值得对象,可能会创建临时对象
		第二条语句是赋值,在赋值语句中使用构造函数将创建一个临时对象
11.const成员函数:
	函数原型void show()const;
	函数定义void Stock::show()const{...}
	以这种方式声明和定义的函数称为const成员函数
	只要类方法不修改类对象,就应声明为const
	声明为const的成员函数无法修改类对象的属性

10.3.6 构造函数和析构函数小结
1.构造函数是一种特殊的成员函数,在创建类对象时被调用
2.构造函数的名称和类名相同,但通过函数重载,可以创建多个同名的构造函数,
	条件是每个函数的特征标(参数)不同
3.构造函数没有声明类型
4.构造函数用于初始化类对象成员,初始化应与构造函数的参数列表匹配
5.如果构造函数只有一个参数,则将对象初始化为一个与参数的类型相同的值时,构造函数将被调用
	eg:Bozo(int age);//一个参数的构造函数
		初始化对象
		Bozo dribble = Bozo(44);
		Bozo roon(66);
		Bozo tubby = 22;//特殊的初始化方式
6.接收一个参数的构造函数允许使用赋值语句来将对象初始化为一个值
	eg:ClassName obj = value;
7.默认构造函数没有参数,创建对象时,如果没有显式地初始化,则将调用默认构造函数
8.如果程序中没有提供任何构造函数,编译器将为程序定义生成一个构造函数
9.默认构造函数可以没有任何参数,如果有,必须为所有参数提供默认值
10.对于未初始化的对象,程序将使用默认构造函数来创建
	eg:	Bozo bubi;
		Bozo * pb = new Bozo;
11.就像对象被创建时调用构造函数,对象被删除时,将调用析构函数
12.每个类都只能有一个析构函数
13.析构函数没有返回类型,也没有参数,名称为类名前加上(~)符号
	eg:	~Bozo();
14.如果构造函数使用了new,则必须提供使用delete的析构函数

10.4 this指针
1.类方法可能涉及到两个对象,在这种情况下要使用C++的this指针
2.一个方法涉及到两个对象数据的比较,传递一个对象的引用,并返回目标对象的引用
	eg:const Stock & topval(const Stock & s)const;
	该函数隐式地访问一个对象,显式地访问另一个对象,并返回其中一个对象的引用
	eg:(Stock)top = stock1.topval(stock2);
3.为了在方法中返回当前对象,使用被称为this的特殊指针
4.this指针指向用来调用成员函数的对象(this被作为隐藏参数传递给方法)
5.this指针为对象的地址
6.所有类方法都将this指针设置为调用它的对象的地址
7.使用(->)符号通过指针来访问类成员(和结构体指针一样)
8.this指针:
	[1]每个成员函数(包括构造函数和析构函数)都有一个this指针
	[2]this指针指向调用对象
	[3]如果方法需要引用整个调用对象,可以使用(*this)
	[4]在成员函数后面使用const限定符将this限定为const,这样this将不能修改对象的值
9.this为指向调用对象的指针,是调用对象的地址,(*)符号解引用,取得调用对象

10.5 对象数组
1.声明对象数组的方式与声明标准类型数组相同
	eg:Stock mystuff[4];
	这个类要么没有显式地定义任何构造函数(这种情况下将使用不执行任何操作的隐式默认构造函数),
	要么定义了一个显式默认构造函数
2.程序创建未显式初始化的类对象时,总是调用默认构造函数
3.可以用构造函数来初始化数组元素,这种情况下为每个元素调用构造函数,
	如果类包含不同的构造函数,可以为每个元素调用不同的构造函数,
	除调用构造函数初始化的对象外,其余未进行显示初始化的元素将调用默认构造函数
	eg:	const int STKS = 10;
		Stock stocks[STKS] = {
			Stock("one",1,1.1),
			Stock("two",2,2.2),
			Stock(),//构造函数
			Stock("four",4,4.4)
		};
4.初始化对象数组的方案:
	[1]先使用默认构造函数创建数组元素
	[2]然后花括号中的构造函数将创建临时对象
	[3]将临时对象的内容复制到相应的元素中
5.要创建类对象数组,这个类必须有默认构造函数

10.6 接口和实现小结
1.可以使用string类对象替代char数组存储字符串,string对象具有自动调整大小功能
2.可以将C风格的字符串赋值给string对象
3.修改类的私有部分和实现文件术语实现变更,修改类的公有部分属于接口变更
	实现变更改变了类的内部工作原理,接口变更改变了使用类方式
4.可以将一个类对象用作另一个类的成员,类的目标是使用户定义类型尽可能和内置类型相似
	类的构造函数负责确保调用对象成员的构造函数
	名为成员初始化列表的特性可提高构造函数设计的效率
	
10.7 类作用域
1.在类中定义的名称(数据成员、成员函数)的作用域为整个类
2.作用域为整个类的名称,只在该类中是已知的,在类外是不可知的
3.可以在不同的类中使用相同的名称,不会引起冲突
4.类作用域意味着不能从外部直接访问类成员,公有函数也是如此,
	要调用公有函数,必须通过对象
5.定义成员函数时,必须使用作用域解析操作符
6.在类声明或成员函数定义中,可以使用未修饰的成员名称
7.构造函数名称在被调用时,才能被识别,因为它的名称与类名相同
8.其他情况下,使用类成员名时,必须根据上下文,
	使用直接成员操作符(.),
	间接成员操作符(->),
	作用域解析操作符(::)
=======================作用域为整个类的常量==============================
9.将类成员声明为const是行不通的,声明类只描述了对象的形式,并没有真正创建对象,
	在对象被创建之前是没有用于存储的空间的
10.声明由所有类共享的常量:
	[1]在类中声明一个枚举,作用域为整个类,
		可以用枚举为整型常量提供作用域为整个类的符号名称,
		用这种方式声明枚举并不会创建类数据成员,所有对象中都不包含枚举,
		Len只是一个符号名称,在作用域为整个类的代码中遇到Len,编译器将使用其值替换名称
		使用枚举只是为了创建符号常量,并不打算创建枚举类型的变量,因此不需要提供枚举名
		eg:	class Stock
			{
			private:
				enum{Len = 30};
				char company[Len];
			};
	[2]使用static关键字在类中定义常量
		这将创建一个名为Len的常量,该常量与其他静态变量存储在一起,
		而不是存储在对象中,因此只有一个Len常量,它被所有Stock对象共享
		eg:class Stock
			{
			private:
				static const int Len = 30;
				char company[Len];
			};
			
10.8 抽象数据类型
1.实现计算机专家所说的抽象数据类型,使用类时一种非常好的方式
2.ADT(abstract data type)以通用的方式描述数据类型,而没有引入语言或实现细节
3.栈的特征:(先进后出)
	[1]可创建空栈
	[2]可将数据项添加到栈顶(压入)
	[3]可从栈顶删除数据项(弹出)
	[4]可查看栈是否填满
	[5]可查看栈是否为空
4.仔细设计类的数据类型,使类占据空间最小,应尽量使用正确的数据类型,使程序所需内存最小
5.bool在多数平台上通常只占一个字节


