第十一章 使用类
1.操作符重载允许将标准C++操作符用于类对象
2.友元允许非成员函数访问类的私有数据

11.1 操作符重载
1.操作符重载时一种形式的C++多态
2.定义多个特征标不同的相同函数名的函数,叫做函数重载或函数多态,
	使用同名的函数完成相同的基本操作
3.操作符重载将重载的概念使用到操作符上,允许操作符多种含义
4.实际上很多C、C++操作符已经被重载
	eg:	将*操作符用于地址则取出地址中存储的值
		将*用于数字时则将得到它们的乘积
5.C++根据操作数的类型及数目决定采用哪种操作
6.C++允许将操作符重载扩展到用户定义类型,
	编译器将根据操作数类型和数目决定使用哪种操作符定义,
	重载操作符可使代码看起来更自然
	eg:允许将两个对象相加
7.操作符重载隐藏了内部机理,强调了实质,OOP的另一个目标
8.要重载操作符,要使用被称为操作符函数的特殊函数形式,操作符重载格式
	eg:operator op(argument-list);
		op是将要重载的操作符,必须是有效的C++操作符
		重载(+)操作符operator +();
		重载(*)操作符operator *();
		重载数组索引操作符([]),operator []();
9.操作符重载,操作符左边的操作数为调用对象,右边的对象做为参数传递
	隐式使用调用对象,显式使用操作符右边的对象
	eg:Time operator +(const Time & t)const;
		Time a,b,c;
		c = a + b; => c = a.operator +(b);

11.2 计算时间:一个重载操作符范例
1.不要返回指向局部变量或临时对象的引用,函数执行完毕后,局部变量和临时对象将消失,
	引用将指向不存在的数据
	
11.2.1 添加加法操作符
1.重载操作符可以在标识符中使用字母、数字、下划线之外的其他字符
	eg:Time operator +(const Time & t)const;
2.重载操作符将第一个对象做为调用对象,将第二个对象做为参数传递
3.可以像调用普通成员函数一样调用操作符重载函数
	eg:	total = coding.operator +(fixing);//函数表示法
		total = coding + fixing;//操作符表示法
	操作符表示法中,左侧对象为调用对象,操作符右边对象是做为参数传递的对象
	operator+()函数的名称使得可以使用函数表示法或操作符表示法来调用,
	编译器将根据操作数的类型来确定如何做
4.可以将两个以上的对象相加
	eg:	Time t1,t2,t3,t4;
		t4 = t1 + t2 + t3;
		转换为函数调用,(+)为从左向右结合的操作符
		t4 = t1.operator +(t2 + t3); =>
		t4 = t1.operator +(t2.operator +(t3));

11.2.2 重载限制
1.多数C++操作符都可以这样重载,重载的操作符不必是成员函数,
	但必须至少有一个操作数是用户定义类型
2.C++对用户定义的操作符重载限制:
	[1]重载后的操作符必须至少有一个操作数是用户定义的类型,
		这将防止用户为标准类型重载操作符
		eg:不能将减法操作符(-)重载为计算两个double的和
	[2]使用操作符时不能违反操作符原来的句法规则,不能改变操作符的优先级
		eg:不能将求模操作符(%)重载为只使用一个操作数 % x;
			如果将加号操作符重载成两个类相加,则新的操作符与原来的加号具有相同的优先级
	[3]不能定义新的操作符
		eg:不能operator **();表示求幂
	[4]不能重载以下操作符:
		(1)sizeof		-- sizeof操作符
		(2).			-- 成员操作符
		(3).*			-- 成员指针操作符
		(4)::			-- 作用域解析操作符
		(5)?:			-- 条件操作符
		(6)typeid		-- 一个RTTI操作符
		(7)const_cast	-- 强制类型转换操作符 
		(8)dynamic_cast	-- 强制类型转换操作符
		(9)reinterpret	-- 强制类型转换操作符
		(10)static_cast	-- 强制类型转换操作符
		
		可重载操作符
		(1)+	(2)-	(3)*	(4)/	(5)%	(6)^
		(7)&	(8)|	(9)~=	(10)!	(11)=	(12)<
		(13)>	(14)+=	(15)-=	(16)*=	(17)/=	(18)%=
		(19)^=	(20)&=	(21)|=	(22)<<	(23)>>	(24)>>=
		(25)<<=	(26)==	(27)!=	(28)<=	(29)>=	(30)&&
		(31)||	(32)++	(33)--	(34),	(35)->*	(36)->
		(37)()	(38)[]	(39)new	(40)delete	(41)new []	(42)delete []
	[5]	[4]中的可重载操作符大多数都可以通过成员函数或非成员函数重载
		下面的操作符只能通过成员函数重载:
		(1)=	-- 赋值操作符
		(2)()	-- 函数调用操作符
		(3)[]	-- 下标操作符
		(4)->	-- 通过指针访问类成员的操作符
3.重载操作符时应遵循一些明智的限制
	eg:不要将(*)重载为交换两个Time对象的数据成员,
		因为表示法中没有任何内容能够表示操作符完成的工作,
		因此最好定义一个具有说明性的方法Swap()

11.2.3 其他重载操作符
1.重载Time类的减法和乘法操作符
	eg:	Time operator -(const Time & t)const;
		Time operator *(double n)const;
	
11.3 友元简介

1.友元:
	突破类的私有成员访问限制,类的公有方法是访问类私有成员的唯一途径
	[1]友元函数
	[2]友元类
	[3]友元成员函数
2.通过让函数成为类的友元,可以赋予该函数与类的成员函数相同的访问权限
3.为什么需要友元:
	在为类重载二元操作符时(带两个参数的操作符)常常需要友元
	eg:	Time类对象乘以实数
		Time operator *(double n)const;
		A = B * 2.75; =>　A = B.operator *(2.75);
		A = 2.75 * B;编译器不能使用相应成员函数进行替换
		左侧的操作数应是Time对象
	解决方案:非成员函数,(大多数操作符都可以通过成员函数或非成员函数重载)
		非成员函数不是由对象调用的,它使用的所有值都是显式参数
		这样编译器能够将A = 2.75 * B;与非成员函数调用匹配A = operator *(2.75,B);
		该函数原型:Time operator *(double m,const Time & t);
		对于非成员重载操作符函数来说,
		操作符左边的操作数对应于操作符函数的第一个参数,
		操作符右边的操作数对应于操作符函数的第二个参数
4.使用非成员函数可以按所需的顺序获得操作数,非成员函数不能访问类的私有数据
	常规非成员函数不能访问,有一类特殊非成员函数可以访问类的私有成员,
	友元函数可以访问类的私有数据
	
11.3.1 创建友元
1.第一步创建友元:创建友元函数的第一步是将其原型放在类声明中,并在原型声明前加上friend关键字
	类声明中的友元函数声明意味着:
	eg:friend Time operator* (double m,const Time & t);
	[1]虽然operator* ()函数是在类声明中声明的,但它不是成员函数,不能使用成员操作符来调用
	[2]虽然operator* ()函数不是成员函数,但它与成员函数的访问权限相同
2.第二步编写友元函数定义:
	因为友元函数不是成员函数,不需要(Time::)限定符
	不要在定义中使用friend关键字
	eg:	Time operator* (double m,const Time & t)
		{
			Time result;
			long totalminutes = t.hours * m * 60 + t.minutes * m;
			
			result.hours = totalminutes / 60;
			result.minutes = totalminutes % 60;
			
			return result;
		}
	有了上述声明
	A = 2.75 * B; 转换为 A = operator* (2.75,B);
	从而调用前面定义的非成员友元函数
3.简而言之,类的友元函数是非成员函数,但与成员函数具有相同的访问权限
4.友元允许了类的非成员函数访问私有数据,违背了OOP数据隐藏的原则
	应将友元函数看做类的扩展接口的组成部分
	double乘以Time,和Time乘以double,前者要求有友元函数,后者使用成员函数
	这是C++句法的结果,而不是概念上的差别
	通过使用友元函数和类方法可以同时表达这两种操作
	[只有类声明可以决定哪一个函数是友元,所以类声明仍然控制哪些函数可以访问私有数据]
	简而言之,类方法和友元只是表达类接口的两种不同的机制
5.按照下面的方式对定义进行修改,交换乘法操作数的顺序,可以将这个友元函数编写为非友元函数
	Time operator* (double m,const Time & t)
	{
		return t * m;
	}
	原来的版本是显式地访问类对象t的数据,所以它必须是友元
	这个版本将Time对象t作为一个整体使用,让成员函数来处理私有值,因此不必是友元
	
	也可以将该版本做为类的友元,则其可做为类的正式接口组成部分
	如果以后需要函数直接访问私有数据,则只需要修改函数定义即可,不必修改类原型
6.如果要为类重载操作符,并将非类的项做为第一个操作数,则可以用友元函数来反转操作数顺序

11.3.2 常用的友元:重载<<操作符
1.可以对<<操作符重载,使之能与cout一起来显示对象的内容
	<<操作符已经被重载很多次,<<操作符最初是C、C++的位左移操作符
	ostream类对该操作符进行重载,将其转换为一个输出工具
	cout是一个ostream对象,能够识别出所有C++基本类型
	因为针对每种基本类型,ostream类声明中都包含了相应重载的operator<<()定义
	例如一个定义使用int参数,一个定义使用double参数
	要使cout能够识别Time对象,一种方法是将一个新的函数操作符定义添加到ostream类声明中
	这不是更好的方法,更好的办法是,通过Time类声明来让Time类知道如何使用cout
2.[1]<<的第一种重载版本
	(1)要使Time类知道使用cout,必须使用友元函数
		eg:	Time trip;	
			cout << trip;
		该操作使用两个对象,第一个是ostream类对象
		如果使用Time成员函数来重载<<,Time对象将是第一个操作数,必须这样使用
		eg:	trip << cout;
		这样不是好的办法,可以通过使用友元函数
		友元声明:friend void operator<< (ostream & os,const Time & t);
		void operator<< (ostream & os,const Time & t)
		{
			os << t.hours << "hours," << t.minutes << "minutes";
		}
		这样便可以使用下述语句
		cout << trip;
		友元函数使用ostream的os作为第一个参数,通常情况下os引用cout对象
		但也可将这一操作用于其他对象,这种情况下os将引用相应的对象,如cerr
		ofstream继承ostream,可以使用ostream的方法
		调用cout << trip应使用cout对象本身,而不是他的拷贝,因此该友元函数按引用传递
		而不是按值,这样将导致os是cout的一个别名,cerr << trip则使os成为cerr的别名
		Time对象可以按引用或按值传递,但按引用传递效率更高
	(2)友元还是非友元
		新的TIme类声明使operator<<()函数成为Time类的一个友元函数
		但该函数不是ostream类的友元函数,该函数访问了Time类的私有数据
		必须是友元,但没有访问ostream的私有成员,将ostream对象做为整体使用
		所以该函数并不一定必须是ostream类的友元
			
 [2]<<的第二种重载版本
	(1)cout << trip;
		这样可行,但重新定义的<<操作符与cout一起使用时不允许将输出拼接起来
		通常cout是可以拼接的
		int x = 5,y = 8;
		cout << x << y;等同于(cout << x) << y;
		iostream定义中,要求<<操作符左边是ostream对象,因为cout是ostream对象,
		表达式cout << x满足要求
		因为表达式cout << x位于y左侧,所以输出语句也要求该表达式是一个ostream对象
		因此ostream类将operator<<()函数实现返回一个ostream对象
		具体的说,该例子返回调用对象cout,因此表达式cout << x本身是一个ostream对象
		而可以位于<<操作符的左侧
	(2)可以对友元函数使用相同的方法,使其返回ostream对象的引用
		ostream & operator<< (ostream & os,const Time & t)
		{
			os << t.hours << "hours," << t.minutes << "minutes";
			return os;
		}
		返回类型为引用,程序开始执行传递了一个对象引用,函数的返回结果就是传递给它的对象
		cout << trip;被转换为operator<< (cout,trip);返回cout对象
		则可以使用cout << "Trip time = " << trip << "(Tuesday)\n";
		分步解析该表达式
		首先cout << "Trip time = ";调用ostream中的<<定义,显示字符串并返回cout对象
		表达式被返回的cout对象替代变成
		cout << trip << "(Tuesday)\n";
		接下来程序使用Time对象的友元函数重载操作符<<的定义,显示trip的值
		并返回cout对象,则语句变成
		cout << "(Tuesday)\n";
		现在使用ostream中用于字符串的定义<<,来显示最后一个字符串
		operator<< ()版本还可用于将输出写入到文件
		eg:	#include<fstream>
			ofstream fout;
			fout.open("file.txt");
			Time trip(12,40);
			fout << trip;
		其中最后一条语句将转换为
		operator<< (fout,trip);
	(3)类继承的引用,基类可以指向派生类,ostream引用可以指向ostream和ofstream对象
		一般可使用友元函数重载操作符<<显示对象内容
3.友元函数也可以作为内联函数,既是定义也是原型
4.友元函数不需要使用类限定符

11.4 重载操作符:作为成员函数还是非成员函数
1.很多操作符都可以通过成员函数或非成员函数实现操作符重载
	一般来说,非成员函数应是友元,这样才能访问类的私有数据
	eg:	Time类可以使用如下成员函数和友元函数实现操作符重载
		(1)Time operator+ (const Time & t)const;//成员函数版本
			第一个操作数通过this指针隐式传递,另一个做为函数参数显式传递
		(2)friend Time operator+ (const Time & t1,const Time & t2);//非成员函数版本
			两个参数按从左至右顺序做为参数传递
2.非成员函数的重载操作符函数(友元)的形参数目与操作符使用的操作数数目相同
	成员函数版本所需的参数数目少一个,第一个参数(调用对象)被隐式传递,
	第二个做为参数显式传递
3.不能使用成员函数和非成员函数(友元函数)同时重载同一个操作符,会导致二义性错误

11.5 再谈重载:矢量类
1.矢量(vector):是工程和物理中使用的一个术语,它是一个有大小和方向的量
2.位移矢量:矢量的长度是其大小,箭头的指向描述了方向,表示这种位置变化的矢量称为位移矢量
3.二维矢量:描述二维矢量只需要两个数
	[1]可以用大小(长度)和方向(角度)描述矢量
	[2]可以用分量x和分量y表示矢量(水平矢量x、垂直矢量y、相加则得到最终矢量)
4.矢量的两种表示法:
	将点右移30个单位,上移40个单位
	与长度为50个单位,方向为53.1度的矢量相同
	[1]矢量:50个单位53.1度
	[2]x=30,y=40
5.使用构造函数会产生临时对象,然后将临时对象赋值给对象
	eg:	Vector shove =  Vector(100,300);
6.使用-im命令选项来使编译器自动搜索数学库

11.5.1 使用状态成员
1.描述对象所处状态的成员称为状态成员(state member)
2.数学函数在使用角度时以弧度为单位,角度和弧度之间的转换
	eg:	//弧度转换为角度系数
		const double Rad_to_deg = 57.2957795130823;
		//弧度转换为角度
		ang = rad / Rad_to_deg;
		//角度转换为弧度
		rad = ang * Rad_to_deg;
		//极坐标转换为直角坐标
		x = mag * cos(ang);//ang为角度
		y = mag * sin(ang);//ang为角度
		//直角坐标转换为极坐标
		mag = sqrt(x * x + y * y);
		ang = atan2(y,x);

11.5.2 为Vector类重载算数操作符
1.重载操作符尽量使用构造函数完成新对象的创建
2.重载乘法操作符使用内联友元将double * Vector处理为Vector * double
	eg:	Vector operator *(double n,const Vector & a)
		{
			return a * n;//使用友元将double*Vector转换为调用操作符重载的成员函数
		}
3.减法操作符:
	[1]使用两个操作数为减法操作符,减法操作符为二元操作符,x - y
	[2]使用一个操作数时为负号操作符,-x,一元操作符
4.Vector类中的减法操作符:
	[1]diff = v1 - v2;隐式转换为diff = v1.operator- (v2);
		从隐式矢量参数减去显式参数传递的矢量
	[2]一元负号操作符,将该符号用于数字时将改变它的符号(-x)
		用于Vector矢量时将反转每个分量的符号,返回与原来矢量相反的矢量
		(极坐标长度不变,方向相反)
	[3]重载两次的(-)操作符有两个含义,但他们的特征标不同
	[4]只有二元形式的操作符(除法/),只能将其重载为二元操作符
5.重载操作符是通过函数实现的,保证操作符函数的特征标不同,
	使用操作符数量与C++内置操作符相同,就可以多次重载同一个操作符

11.5.3 对实现的说明
1.将接口与实现分离是OOP的目标,可以对实现进行调整而不用修改使用这个类的程序代码
2.类中存储更多的数据意味着占据更多的内存,存储数据使得访问更快

11.5.4 使用Vector类来模拟随机行走
1.醉鬼走路问题,步长固定,每一步的方向随机,与前一步不同
	走到离出发点距离50英尺需要的步数
	不断将随机方向的矢量相加,直到长度超过50英尺
2.cstdlib srand(time(0))函数 rand()函数
	srand()产生随机数种子,该随机值用作下一次函数调用的种子
	srand()允许覆盖默认的种子值,重新启动另一个随机数序列
	srand(time(0))运行每次都将设置不同的种子
3.ctime time(0) 函数返回当前时间

11.6 类的自动转换和强制类型转换
1.C++内置类型转换:将一个标准类型变量赋值给另一种标准类型的变量时,
	如果这两种类型兼容,C++自动将这个值转换为接收变量的类型,
	C++包含用于进行转换的内置规则,有些转换将降低精度
	eg:	long count = 8;//int to long
		double time = 11;//int to double
		int side = 3.33;//double to int
2.C++不自动转换不兼容的类型,
	计算机内部可能使用整数来表示指针,但指针和整数是不同的概念,
	不能计算指针的平方
	eg:	int *p = 10;//非法的,p为指针,10为整数,
3.可以使用强制类型转换
	eg:	int *p = (int *)10;//强制类型转换
4.可以将类定义为与基本类型或另一个类相关,使得从一种类型转换为另一种类型是有意义的
	这种情况下程序员可以指定C++如何自动进行类型转换,或通过强制类型转换
5.接收一个参数的构造函数,在将类对象赋值为一个可接收的值时将自动调用构造函数
	eg:	Stonewt = mycat;
		mycat = 19.6;
		//将自动调用仅一个参数的构造函数
		//程序使用构造函数创建临时对象,并将19.6做为初始化值,
		//随后采用逐成员赋值方式将该临时对象的内容复制到mycat中
		//这一过程称为隐式转换,因为它是自动进行的,不需要显式强制转换
6.只有接收一个参数的构造函数才能做为转换函数,多个参数的构造函数不能用来转换类型
7.这种自动转换特性可能导致意外的转换,C++新增了关键字(explicit),
	用来关闭这种自动特性,关键字explicit用于关闭隐式自动类型转换
	仍然允许显式强制类型转换
	eg:	可以这样声明构造函数
		explicit Stonewt(double lbs);
		Stonewt mycat;
		mycat = 19.6;//如果单参数构造函数声明为explicit则无效
		mycat = Stonewt(19.6);//有效调用构造函数
		mycat = (Stonewt)19.6;//有效
8.只接收一个参数的构造函数定义了从参数类型到类类型的转换,
	如果使用了explicit关键字限定了构造函数,则它只能进行显式转换,否则也可用于隐式转换
9.声明了explicit的构造函数只能用于显式强制类型转换,否则还可用于下列隐式转换:
	[1]将Stonewt对象初始化为double时
	[2]将double赋值给Stonewt对象时
	[3]将double值传递给接收Stonewt参数的函数时
	[4]返回值被声明为Stonewt的函数试图返回一个double时
	[5]上述任一情况下,使用可转换为double类型的内置类型时
10.函数原型化提供的参数匹配过程,允许使用Stonewt(double)构造函数转换其他数值类型
	eg: 先将int转换为double,然后使用Stonewt(double)构造函数
		Stonewt Jumbo(7000);
		Jumbo = 7300;
		当且仅当转换不存在二义性时,才会进行这两步转换
		如果类还定义了Stonewt(long)编译器将拒绝这些语句
		int可被转换为long或double,调用存在二义性

11.6.1 程序说明
1.赋值给Stonewt对象的值为int时,将int转化哪位double,再调用构造函数进行隐式转换
	eg:	Stonewt taft = 325;
2.将int传递给接收Stonewt参数的函数时,先寻找接收int参数的构造函数,
	不存在则寻找接收的其他内置类型的构造函数,找到则将int转换为相应类型
	然后调用构造函数进行隐式转换

11.6.2 转换函数
1.构造函数只适用于从某种类型到类类型的转换,
2.要进行相反的转换,必须使用特殊的C++操作符函数--转换函数
3.转换函数是用户定义的强制类型转换,可以像强制类型转换那样使用它们
4.如果定义了Stonewt到double的转换函数,就可以使用下面的转换
	eg:	Stonewt wolfe(285,7);
		double host = double(wolfe);//第一种句法
		double thinker = (double)wolfe;//第二种句法
	也可以让编译器决定如何做
		Stonewt wells(20,3);
		double star = wells;//隐式使用转换函数
		编译器发现右侧是Stonewt对象,左侧是double类型,
		首先查看是否定义了与此匹配的转换函数
		如果没有则报错,指出无法将Stonewt赋值为double
5.创建转换函数,创建转换为typeName的函数
		eg:	operator typeName();
		typeName指出了要转换的类型
	注意
	[1]转换函数必须是类方法
	[2]转换函数不能指定返回类型
	[3]转换函数不能有参数
		eg:	转换为double的函数原型
			operator double();
		转换函数必须是类方法意味着其必须由类对象调用,
		从而告知函数要转换的值,因此不需要参数
	添加转换函数原型:
		operator int()const;
		operator double()const;
		Stonewt::operator int()const
		{
			return int(pounds + 0.5);
		}
		Stonewt::operator double()const
		{
			return pounds;
		}
6.转换函数虽然没有声明返回类型,也将返回所需的值
7.与cout配合使用未进行显式强制类型转换,程序不会自动进行转换
	eg:	double p_wt = poppins;//隐式类型转换
		cout << poppins << " int(pounds).\n";//显式强制转换
		cout << poppins << " pounds.\n";
8.当类定义了多种类型转换时,未指出要转换为哪种类型,编译器将报告二义性转换
	如果类只定义了一种类型的转换,编译器将自动默认使用该转换函数进行转换
	[1]如果类只定义了一种转换,转换时转换的类型不是类中定义的,编译器将使用这个转换函数,
	并将结果转换为目标类型
	[2]如果类中定义了多个转换函数,当将类转换为非类定义的类型时,将导致二义性
	eg:	poppins 类中只定义了double,那么隐式转换将先转换为double,然后将double赋值给long
		long imb = poppins;
		poppins 定义了double、int,转换为long时将导致二义性
		long imb = poppins;//报错
	[3]类定义了多个转换函数时,仍然可以使用显式强制类型转换指出要使用哪个转换函数
	eg:	两种强制类型转换表示法
		long gone = int(poppins);
		long gone = (int)poppins;
9.转换函数存在的问题:
	[1]可能在用户不希望转换时进行了转换
	[2]关键字explicit不能用于转换函数
	[3]可使用功能相同的非转换函数替换转换函数即可
		eg:	Stonewt::operator int()const{return int(pounds + 0.5);}
			使用下面进行替换
			int Stonewt::Stone_to_Int()cosnt{return int(pounds + 0.5);}
			这样下面的语句将是非法的
			int plb = poppins;
			如果需要这样的转换,可以使用
			int plb = poppins.Stone_to_Int();
	[4]应谨慎地使用转换函数,通常选择仅在显式调用才会执行的函数
10.C++为类提供的类型转换:
	[1]只有一个参数的类构造函数用于将类型与该参数相同的值转换为类类型
		在类构造函数中使用explicit关键字可防止隐式转换,只允许显式转换
	[2]被称为转换函数的特殊类成员操作符函数,用于将类对象转换为其他类型
		转换函数是类成员,没有返回类型,没有参数,格式为operator typeName()
		typeName是类要转换的类型,将类赋值给typeName类型变量
		或强制类型转换为typeName类型,转换函数将自动被调用

11.6.3 转换函数和友元函数
1.都以类对象的参数的重载成员函数和友元函数不能同时存在
	提供了方法定义或友元函数可以使用下面的方法
	eg:	方法
		Stonewt Stonewt::operator+ (const Stonewt & st)const
		{
			double pds = pounds + st.pounds;
			Stonewt sum(pds);
			return sum;
		}
		友元函数
		Stonewt operator+ (const Stonewt & st1,const Stonewt & st2)const
		{
			double pds = st1.pounds + st2.pounds;
			Stonewt sum(pds);
			return sum;
		}
2.重载了加法操作符的对象可以这样做
	eg:	Stonewt jennySt(9,12);
		Stonewt bennySt(12,8);
		Stonewt total;
		total = jennySt + bennySt;
3.提供了double的构造函数Stonewt(double)可以这样使用
	eg:	Stonewt jennySt(9,12);
		double kennyD = 176.0;
		Stonewt total;
		total = jennySt + kennyD;
		//double会调用构造函数转换为Stonewt类对象
4.只有友元函数才允许将double放在+操作符前面
	eg:	Stonewt jennySt(9,12);
		double pennyD = 146.0;
		Stonewt total;
		total = pennyD + jennySt;
5.将2中加法操作转换为函数调用
	eg:	total = jennySt.operator+ (bennySt);
		或
		total = operator+ (jennySt + bennySt);
	上述转换实参类型都和形参匹配,成员函数是通过Stonewt对象调用的
6.将3中加法操作符转换为函数调用
	eg:	total = jennySt.operator+ (kennyD);
		或
		total = operator+ (jennySt,kennyD);
	成员函数通过Stonewt对象调用,每个方法都存在double参数,
	会隐式调用double构造函数将double转换为Stonewt对象
7.在6中情况下定义了operator double();函数将造成混乱,
	该函数提供另一种解释方式,编译器将jennySt转换为double并进行加法操作
	而不是将doule转换为Stonewt对象
	过多的转换函数将导致二义性
8.将4中加法操作转换为函数调用
	eg:	total = operator+ (pennyD + jennySt);//友元函数
		第一个参数为double,将调用double构造函数将其转换为Stonewt对象,
		编译器不会先将pennyD转换为Stonewt对象,然后调用成员函数
		这里将对参数进行转换,double转换为Stonewt对象
		然后执行友元函数内容
9.将加法定义为友元将更容易实现程序自动类型转换,
	原因是两个参数都为函数参数且类型匹配
10.要将double与Stonewt对象相加,
	[1]可以定义将其加法操作定义为友元函数
		让Stonewt的double构造函数将double转换为Stonewt对象
		这种方法以来与隐式构造函数转换,内存开销和时间消耗较大
		eg:	Stonewt operator+ (double x)const;
	[2]将加法操作符重载为使用double参数的成员方法
		这种方法使程序较长,耗时短,内存开销小
		eg:	friend Stonewt operator+ (double x,const Stonewt & st);
11.在main前调用Bootstrap函数,这可以修改程序第一个执行的入口
	在main之前执行Bootstrap函数,以为程序的前期执行做准备
	全局对象将在main执行之前创建,可以实现这种需求
	可以创建一个类,其默认构造函数将调用所有bootstrap函数
	eg:	声明一个具有默认构造函数的类,
		并在默认构造函数调用其要初始化数据的函数
		然后在main函数前面实例化这个类,
		便达到了在main执行前进行一些初始化操作
		class Test
		{
		private:
			...
		public:
			Test()
			{
				GetData1();//various
				GetData2();//bootstrap
				GetData3();//functions
			}
		};
		//main.c
		Test t;
		int main()
		{
			...
		}
