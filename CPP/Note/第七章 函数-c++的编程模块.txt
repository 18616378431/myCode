第七章 函数-c++的编程模块

7.1 复习函数的基本知识
1.创建函数:
	(1)提供定义
	(2)提供原型
	(3)调用函数
	
7.1.1 定义函数
1.函数分有返回值和无返回值(void),有返回值的函数将返回一个值给调用函数
2.无返回值函数使用void关键字,可以return ;
3.有返回值函数在函数声明时指定返回值类型,
	函数内返回值类型可以常量、变量、表达式(结果必须为typename或可以转换为typename)
4.返回类型可以是整数、浮点数、指针、结构、对象,不能是数组,
	但是可以将数组作为结构或对象的组成部分返回
5.被调函数将返回值放到指定CPU寄存器或内存单元中,
	调用函数去那块内存单元按指定类型查找返回值
7.1.2 函数原型和函数调用
1.为什么需要原型:
	原型描述了函数到编译器的接口,将函数的返回类型以及参数的类型和数量告诉编译器
2.函数原型句法
	(1)函数原型是一条语句,必须以分号结尾.将函数定义的函数头复制并添加分号
	(2)函数原型不需要变量名,只有类型列表就够了
	(3)原型中的变量名相当于占位符,因此不必与函数定义中的变量名相同
3.c++与ANSI C的区别
	(1)ANSI C中原型是可选的,c++中原型是必不可少的
	(2)c++中括号为空或void是等价的,意味着没有参数,
		ANSI C中括号为空意味着不支出参数,将在后面定义参数列表
	(3)c++中不指定参数列表时应使用省略号...,eg:void say_hi(...);
4.原型的功能
	(1)编译器能正确处理函数的返回值
	(2)编译器检查使用的参数数目是否正确
	(3)编译器检查使用的参数类型是否正确
	(4)通常原型自动将被传递的参数强制转换为期望的类型,
		仅当有意义时,原型化才会导致类型转换,原型不会将整数转换为指针或结构
	(5)在编译截断进行的原型化被称为静态类型检查(static type checking)

7.2 函数参数和按值传递
1.函数传参数使用的是原变量的拷贝,不影响参数原值
2.形参:用于接收传递值得变量叫做形参,传递给函数的值成为实参
3.函数中声明的变量包括形参都是函数私有的,
	函数被调用时计算机为这些变量分配内存,
	函数结束时释放这些变量使用的内存,
	这些变量称为局部变量,具有函数作用域,
	也称为自动变量,在程序执行过程中自动分配和释放内存

7.2.1 多个参数
1.函数可以有多个参数,参数之间逗号分隔
2.cin.get()读取所有输入的字符包括空格和换行,cin >> char跳过空格和换行
	
7.2.2 另外一个接收两个参数的函数
1.形参从调用函数那里获取值,函数内其他局部变量在函数定义内获取值

7.3 函数和数组
1.函数传递数组:int sum_arr(int arr[],int n);arr为数组名,实际为指针

7.3.1 函数如何使用指针来处理数组
1.c++和c语言一样,将数组名视为指针
2.数组名为第一个元素的地址
3.当且仅当用于函数头和函数原型时,int arr[]和int *arr时等价的
4.arr[i] = *(arr + i),&arr[i] = arr + i
5.指针加减1,实际上是加上了一个与指针指向类型的长度相等的值(以字节为单位),
	遍历数组指针加法和数组下标是等效的

7.3.2 将数组作为参数意味着什么
1.传递常规变量,函数将使用该变量的拷贝;
	传递数组时,函数将使用原来的数组
2.数组名arr和&arr[0]是等价的

7.3.3 更多数组函数范例
1.数组名为数组首元素地址,传递给函数的是数组的地址,函数修改的是原数组,
	使用const限定符防止函数修改数组
			
7.3.4 使用数组区间的函数
1.传统c++函数处理数组方法,是传递数起始位置、数组元素类型、数组大小给函数
2.另一种方法:指定元素区间,传递两个指针,一个标识数组的开头,一个标识数组的末尾
3.标识数组末尾的指针为指向最后一个元素后面的指针,指向数组结尾后面的一个位置
4.同类型指针相减,结果为类型个数,即sizeof(类型)*number为指针间隔字节数

7.3.5 指针和const
1.两种不同的方式将const用于指针:
	(1)使指针指向一个常量对象,可防止使用指针修改所指向的值,
		eg:const int *pt;
		const 修饰*pt,指针指向的值为常量
		pt指向const int,指向的值不可修改,但可以修改指针的指向的位置,即指针的值
	(2)将指针声明为常量,可防止改变指针指向的位置,
		eg:int * const pt;
		const 修改pt,指针为常量,不可更改
		pt指向int,pt不可修改,指向的值可以修改
2.禁止将const指针赋给非const指针
3.将指针参数声明为指向常量数据的指针:
	使函数能够处理const和非const实参,否则将只能接收非cosnt数据

7.4 函数和二维数组
1.int *arr[4];声明由4个指向int的指针组成的数组
2.int (*arr)[4];指向由4个int组成的数组的指针
3.同等声明:int arr[][4];声明指向4个int组成的数组的指针
4.arr[r][c] = *(*(arr + r) + c),等价
5.二维数组,数组名称加上一个数值移动距离为子数组字节大小,
	int arr[3][4],即arr + 1,移动4个int大小,移动到二维数组下一行
6.二维数组形参没有使用const,const只能用于指向基本类型的指针,arr为指向指针的指针

7.5 函数和C-风格字符串
1.C风格字符串由一系列字符组成,以空值字符(\0)结尾
2.将字符串作为参数时传递的是地址,可以使用const防止修改字符串

7.5.1 将C-风格字符串作为参数的函数
1.表示字符串的三种方式:
	(1)char数组
	(2)用引号括起的字符串字面值
	(3)被设置为字符串地址的char指针
2.将字符串作为参数传递实际传递的是字符串第一个字符的地址
3.C风格的字符串与常规char数组的区别:
	(1)字符串有内置的结束字符
	(2)不以空值字符结尾的char数组只是数组
7.5.2 返回C-风格字符串的函数
1.char *pstr = new char[n+1];使用new操作符分配内存后要使用delete []pstr;释放内存
2.new和delete成对出现,new数组,使用delete []pt释放内存,普通变量使用delete 指针

7.6 函数和结构
1.可以将结构赋给另一个结构
2.(函数形参)可以按值传递结构,函数使用原始结构的拷贝
3.函数可以返回结构
4.数组名是数组的地址,结构名只是结构的名称,使用&操作符获取结构的地址
5.函数处理结构的三种方式:
	(1)按值传递
	(2)传递结构的地址
	(3)按引用传递
	
7.6.1 传递和返回结构
1.按值传递结构,使用结构的拷贝
2.结构可以做为函数的返回类型、参数,声明变量

7.6.2 另一个处理结构的函数范例
1.c++数学库中假设角度的单位为弧度
2.	[1]直角坐标:水平偏移和垂直偏移表示点,(x,y)
	[2]极坐标:点到原点的距离和角度表示点,偏移原点的距离和方向,distance,angle
3.弧度转换为角度的计算公式:rad*180/π(弧度乘180,除以pi),180/π 结果约为57.29577951
4.使用数学库函数需要包含头文件math.h,c++中为cmath
5.计算直角坐标,点到原点的距离:distance = sqrt(x*x + y*y);
6.计算直角坐标点的角度:根据直角坐标的x、y的值计算角度(弧度表示),
	angle = atan2(y,x);得到的结果为弧度
7.atan()函数不区分180之内和之外的角度
8.类操作符是使用函数实现的,
	cin >> rplace.x >> rplace.y; 最终返回cin对象,即istream值
	cin >> rplace.x返回cin对象,可以链式操作继续获取输入
	cin对象用于测试表达式时,根据输入是否成功返回bool值true或false
	输入不符合读取数据类型的值时,不符合数据类型的值将留在输入队列中,返回将被转换为false的值
	使用cin.clear();重置输入

7.6.3 传递结构的地址
1.函数传递结构的地址:
	(1)调用函数时,使用&操作符将结构的地址传递给函数
	(2)将形参声明为指向结构的指针,不修改结构使用const修饰符
	(3)形参为指针,使用间接成员操作符(->)

7.7 函数和string对象
1.可以将结构或对象做为完整的实体传递给函数
2.使用string对象需包含头文件string
3.可以像使用基本类型使用string对象
4.getline(cin,string);获取一行输入

7.8 递归
1.函数通过调用自己实现功能,称为递归

7.8.1 包含一个递归调用的递归
1.递归调用结束时,将程序控制权返回给调用函数,即当前函数的上层函数
2.程序沿进入的路径返回,递归结束时,先执行最内层函数,逐层执行,与函数调用次序相反

7.8.2 包含多个递归调用的递归
1.将一项工作不断细分为两项较小的、类似的工作时,可以使用递归

7.9 函数指针
1.函数的地址是存储其机器语言代码的内存的开始地址,即函数的开始地址

7.9.1 函数指针的基础知识
1.使用函数指针:
	(1)获取函数的地址
	(2)声明一个函数指针
	(3)使用函数指针来来调用函数
	[1]获取函数的地址:函数名就是函数的开始地址,即函数的地址,将函数作为参数传递,传递函数名即可
	[2]声明函数指针:声明某种数据类型的指针时,必须指定指针指向的类型
					声明指向函数的指针时,必须指定指针指向函数类型,即声明函数的返回类型及参数
					声明像函数原型那样指出有关函数的信息
					eg:原型 		double pam(int);
					   函数指针		double (*pf)(int);
					(*pf)和pam都为函数,pf为函数指针
					需使用括号将*和函数指针括起,(*pf)(int)为函数指针,*pf(int)返回指针的函数
					函数声明中的函数指针形参
					eg:void estimate(int lines,double 	(*pf)		(int));
											   返回类型  函数指针	参数列表
	[3]使用指针来调用函数:(*pf)与pam函数名称相同,使用时将(*pf)看做函数名,
							c++支持像使用函数名一样使用函数指针
							eg:pam(5);(*pf)(5);pf(5);三者等价
	




	



