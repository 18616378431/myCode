1.最初特性:友元类、友元类方法、嵌套类
  新增特性:引发异常、try块和catch块、异常类、运行阶段类型识别(RTTI)
	dynamic_cast和typeid、static_cast、const_cast和reinterpret_cast

15.1 友元
1.类并非只能拥有友元函数,也可以将类做为友元
2.友元类的所有方法都可以访问原始类的私有成员和保护成员
3.更严格的限制,可以只将特定的成员函数指定为另一个类的友元

15.1.1 友元类
1.一个对象可以改变另一个对象的状态的类之间的关系可以定义为友元类
2.友元可以声明在公有、私有、保护部分
	eg:	在类中声明Remote为友元类
		friend class Remote;
		Remote类使用了Tv类,编译器必须先了解Tv类才能处理Remote类
		一种方法是首先定义Tv类,另一种方法是使用向前声明(forward declaration)
		
15.1.2 友元成员函数
1.可以使一个类的成员方法称为另一个类的友元,而不必让整个类都成为友元
	需要注意的是,必须小心排列各种声明和定义的顺序
	eg:	声明一个友元成员函数
		class Tv
		{
		friend void Remote::set_chan(Tv & t,int c);
		...
		};
2.使用向前声明(forward declaration)避免循环依赖
	Tv类需要知道Remote的set_chan方法,Remote定义应放到Tv前面
	而Remote方法提到了Tv对象,Tv定义应放到Remote之前
	eg:	class Tv;
		class Remote{...};
		class Tv{...};
3.Remote的内联方法调用了Tv的公有方法,此时编译器必须已经知道Tv类的声明
	解决方案是使Remote中只包含方法声明,实际定义放在Tv类之后
	eg:	class Tv;			//forward declaration
		class Remote{...};	//Tv-using methods as prototypes only
		class Tv{...};
		//puts Remote method definitions here
		Remote方法的原型void onoff(Tv & t);
4.检查到该原型时,编译器需要知道一个Tv类,向前声明提供了这些信息
	当编译器到达真正的方法定义时,它已经读取了Tv类的声明,并拥有了编译这些方法的所有信息
	通过在方法定义中使用inline关键字,可使方法成为内联方法
5.内联函数:内联函数的链接性是内部的,函数定义必须在使用函数的文件中
	内联函数位于头文件中,在使用函数的地方包含头文件可确保定义放在正确的地方
	可以将定义放在实现文件中,但必须删除关键字inline,这样函数的链接性是外部的
6.使整个类为友元不需要向前声明,友元已经指出友元目标是一个类
	eg:	friend class Remote;
	
15.1.3 其他友好关系
1.互为友元,原型必须在定义前面,以便编译器获取足够的信息来编译该方法
	eg:	class Tv
		{
		friend class Remote;
		public:
			void buzz(Remote & r);
			...
		};
		class Remote
		{
			friend class Tv;
		public:
			bool volup(Tv & t){return t.volup();}
			...
		};
		inline void Tv::buzz(Remote & r)
		{
			...
		}
2.共同的友元,函数需要访问两个类的私有数据,则将函数作为两个类的友元
	eg:	class Analyzer;
		class Probe
		{
			friend void sync(Analyzer & a,Probe & p);//sync a to p
			friend void sync(Probe & p,Analyzer & a);//synv p to a
			...
		};
		class Analyzer
		{
			friend void sync(Analyzer & a,Probe & p);//sync a to p
			friend void sync(Probe & p,Analyzer & a);//synv p to a
			...
		};
		//define the friend functions
		inline void sync(Analyzer & a,Probe & p)
		{
			...
		}
		inline void sync(Probe & p,Analyzer & a)
		{
			...
		}
		向前声明使编译器看到Probe中的友元时,知道Analyzer是一个类型

15.2 嵌套类
1.嵌套类(nested class):可以将类声明放在另一个类中,在另一个类中声明的类被称为嵌套类
	它提供新的类型类作用域类避免名称混乱
2.包含类的成员函数可以创建和使用被嵌套类的对象,仅当声明位于公有部分时,才可以在包含类的外面使用嵌套类
	且必须使用作用域解析操作符
3.对类进行嵌套与包含不同,包含意味着将类对象作为另一个类的成员,而对类进行嵌套不创建类成员,
	而是定义了一种类型,该类型仅在包含嵌套类声明的类中有效
4.对类进行嵌套通常是为了帮助实现另一个类,并避免名称冲突
	eg:	(1)嵌套结构
		class Queue
		{
			//class scope definitions
			//Node is a nested structure definition local to this class
			struct Node{Item item;struct Node * next;};
			...
		};
		结构是一种成员默认为公有的类,Node实际上是一个嵌套类
		bool Queue::enqueue(const Item & item)
		{
			if(isfull())
				return false;
			Node * add = new Node;
			if(add == NULL)
				return false;
			add->item = item;
			add->next = NULL;
			...
		}
		(2)嵌套类
		class Queue
		{
			//class scope definitions
			//Node is a nested class definition local to this class
			class Node
			{
			public:
				Item item;
				Node * next;
				Node(const Item & i):item(i),next(0){}
				...
			};
			...
		};
		在类外部定义嵌套类的方法
		Queue::Node::Node(const Item & i):item(i),next(0){}
		新的enqueue写法
		bool Queue::enqueue(const Item & item)
		{
			if(isfull())
				return false;
			Node * add = new Node(item);
			if(add == NULL)
				return false;
			...
		}
		
	