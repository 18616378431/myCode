1.最初特性:友元类、友元类方法、嵌套类
  新增特性:引发异常、try块和catch块、异常类、运行阶段类型识别(RTTI)
	dynamic_cast和typeid、static_cast、const_cast和reinterpret_cast

15.1 友元
1.类并非只能拥有友元函数,也可以将类做为友元
2.友元类的所有方法都可以访问原始类的私有成员和保护成员
3.更严格的限制,可以只将特定的成员函数指定为另一个类的友元

15.1.1 友元类
1.一个对象可以改变另一个对象的状态的类之间的关系可以定义为友元类
2.友元可以声明在公有、私有、保护部分
	eg:	在类中声明Remote为友元类
		friend class Remote;
		Remote类使用了Tv类,编译器必须先了解Tv类才能处理Remote类
		一种方法是首先定义Tv类,另一种方法是使用向前声明(forward declaration)
		
15.1.2 友元成员函数
1.可以使一个类的成员方法称为另一个类的友元,而不必让整个类都成为友元
	需要注意的是,必须小心排列各种声明和定义的顺序
	eg:	声明一个友元成员函数
		class Tv
		{
		friend void Remote::set_chan(Tv & t,int c);
		...
		};
2.使用向前声明(forward declaration)避免循环依赖
	Tv类需要知道Remote的set_chan方法,Remote定义应放到Tv前面
	而Remote方法提到了Tv对象,Tv定义应放到Remote之前
	eg:	class Tv;
		class Remote{...};
		class Tv{...};
3.Remote的内联方法调用了Tv的公有方法,此时编译器必须已经知道Tv类的声明
	解决方案是使Remote中只包含方法声明,实际定义放在Tv类之后
	eg:	class Tv;			//forward declaration
		class Remote{...};	//Tv-using methods as prototypes only
		class Tv{...};
		//puts Remote method definitions here
		Remote方法的原型void onoff(Tv & t);
4.检查到该原型时,编译器需要知道一个Tv类,向前声明提供了这些信息
	当编译器到达真正的方法定义时,它已经读取了Tv类的声明,并拥有了编译这些方法的所有信息
	通过在方法定义中使用inline关键字,可使方法成为内联方法
5.内联函数:内联函数的链接性是内部的,函数定义必须在使用函数的文件中
	内联函数位于头文件中,在使用函数的地方包含头文件可确保定义放在正确的地方
	可以将定义放在实现文件中,但必须删除关键字inline,这样函数的链接性是外部的
6.使整个类为友元不需要向前声明,友元已经指出友元目标是一个类
	eg:	friend class Remote;
	
15.1.3 其他友好关系
1.互为友元,原型必须在定义前面,以便编译器获取足够的信息来编译该方法
	eg:	class Tv
		{
		friend class Remote;
		public:
			void buzz(Remote & r);
			...
		};
		class Remote
		{
			friend class Tv;
		public:
			bool volup(Tv & t){return t.volup();}
			...
		};
		inline void Tv::buzz(Remote & r)
		{
			...
		}
2.共同的友元,函数需要访问两个类的私有数据,则将函数作为两个类的友元
	eg:	class Analyzer;
		class Probe
		{
			friend void sync(Analyzer & a,Probe & p);//sync a to p
			friend void sync(Probe & p,Analyzer & a);//synv p to a
			...
		};
		class Analyzer
		{
			friend void sync(Analyzer & a,Probe & p);//sync a to p
			friend void sync(Probe & p,Analyzer & a);//synv p to a
			...
		};
		//define the friend functions
		inline void sync(Analyzer & a,Probe & p)
		{
			...
		}
		inline void sync(Probe & p,Analyzer & a)
		{
			...
		}
		向前声明使编译器看到Probe中的友元时,知道Analyzer是一个类型

15.2 嵌套类
1.嵌套类(nested class):可以将类声明放在另一个类中,在另一个类中声明的类被称为嵌套类
	它提供新的类型类作用域类避免名称混乱
2.包含类的成员函数可以创建和使用被嵌套类的对象,仅当声明位于公有部分时,才可以在包含类的外面使用嵌套类
	且必须使用作用域解析操作符
3.对类进行嵌套与包含不同,包含意味着将类对象作为另一个类的成员,而对类进行嵌套不创建类成员,
	而是定义了一种类型,该类型仅在包含嵌套类声明的类中有效
4.对类进行嵌套通常是为了帮助实现另一个类,并避免名称冲突
	eg:	(1)嵌套结构
		class Queue
		{
			//class scope definitions
			//Node is a nested structure definition local to this class
			struct Node{Item item;struct Node * next;};
			...
		};
		结构是一种成员默认为公有的类,Node实际上是一个嵌套类
		bool Queue::enqueue(const Item & item)
		{
			if(isfull())
				return false;
			Node * add = new Node;
			if(add == NULL)
				return false;
			add->item = item;
			add->next = NULL;
			...
		}
		(2)嵌套类
		class Queue
		{
			//class scope definitions
			//Node is a nested class definition local to this class
			class Node
			{
			public:
				Item item;
				Node * next;
				Node(const Item & i):item(i),next(0){}
				...
			};
			...
		};
		在类外部定义嵌套类的方法
		Queue::Node::Node(const Item & i):item(i),next(0){}
		新的enqueue写法
		bool Queue::enqueue(const Item & item)
		{
			if(isfull())
				return false;
			Node * add = new Node(item);
			if(add == NULL)
				return false;
			...
		}

15.2.1 嵌套类和访问权限
(1)有两种访问权限适合于嵌套类
	作用域和访问控制
	[1]嵌套类的声明位置决定了嵌套类的作用域
	[2]嵌套类的公有部分、保护部分、私有部分控制了对类成员的访问
1.作用域
	(1)类的默认访问权限是私有的(private)
	(2)嵌套类位于类的私有部分,其派生类及类外对嵌套类都是不可见的
	(3)嵌套类是在另一个类的保护分部声明的,则嵌套类对派生类是可见的,但对于类外部是不可见的
	(4)嵌套类是在另一个类的公有部分声明的,则嵌套类对派生类和类外部都是可见的
	(5)在类外部使用嵌套了,必须使用类限定符(className::nestedClassName)
	(6)嵌套结构和枚举的作用域与嵌套类相同
		eg:	class Team
			{
			public:
				class Coach{...};
				...
			};
			在类外部使用嵌套类
			Team::Coach forhire;//create a Coach object outside the Team class
	(7)嵌套类、结构和枚举作用域特征
		声明位置	包含它的类是否可以使用它	从包含它的类派生而来的类是否可以使用它	外部世界是否可以使用
		私有部分		是							否										否
		保护部分		是							是										否
		公有部分		是							是										是(通过类限定符)
2.访问控制
	(1)类可见后,起决定作用的是访问控制
	(2)嵌套类的访问控制规则和常规类相同
	(3)包含嵌套类的类只能访问嵌套类的公有部分
	(4)类声明的位置决定了类的作用域和可见性,类可见后,
		访问控制规则(公有、私有、保护、友元)将决定程序对嵌套类成员的访问权限
		
15.2.2 模板中的嵌套
1.普通嵌套类可以转换为模板类

15.3 异常
1.异常:程序运行阶段发生错误,导致程序不能正常地运行下去
	(1)打开不可用的文件
	(2)请求过多的内存
	(3)遭遇不能容忍的值
2.异常是新加入到C++中的

15.3.1 调用abort()
1.abort()位于头文件cstdlib(stdlib.h)中,向标准错误(cerr)流发送消息abnormal program termination(程序异常终止)然后终止程序
2.它还返回随实现而异的值,告诉操作系统(如果程序由另一个程序调用,则告诉父进程)处理失败
3.abort()是否刷新文件缓冲区(用于存储读写到文件中的数据的内存区域)取决于实现
	可以使用exit(),该函数刷新文件缓冲区,但不显示消息

15.3.2 返回错误码
1.使用函数返回值指出问题
	eg:ostream的gte(void)成员通常返回下一个输入字符的ASCII码,到达文件结尾时将返回EOF
		可以使用指针或引用将值返回给调用程序,并使用函数的返回值指出成功还是失败
		istream的重载操作符>>使用了这种技术的变体
2.通过告知程序成功还是失败,使得程序可以采取异常终止程序之外的措施
3.另一种存储返回条件的方法是使用全局变量,出现问题的函数设置该全局变量的值为特殊值
	调用程序检查该值
	eg:	传统的C语言数学库Math使用的就是这种方法,全局变量名称为errno
		必须确保其他函数没有将该全局变量用于其他用途
	
15.3.3 异常机制
1.C++异常是对程序运行过程中发生的异常情况的一种响应
	异常提供了将控制权从程序的一个部分传递到另一部分的途径
2.异常处理的组成部分:
	(1)应发异常
	(2)捕获有处理程序的异常
	(3)使用try块
3.程序在出现问题时将引发异常
4.(1)throw语句实际上是跳转,即命令程序跳转到另一条语句
	throw关键字表示引发异常,紧随其后的值(字符串或对象)指出了异常的特征
	程序使用异常处理程序(exception handler)捕获异常,异常处理程序位于要处理问题的程序中
	指引throw语句相当于执行返回语句,它将终止函数的执行
	throw不是将控制权返回给调用程序,而是导致程序沿函数调用序列后退,直到找到包含try块的函数
	程序将在回退路径中寻找与引发的异常类型匹配的异常处理程序
  (2)catch关键字表示捕获异常
	处理程序以关键字catch开头,随后是位于括号中的类型声明,它指出了异常处理程序要相应的异常类型
	然后是花括号括起的代码块,指出要采取的措施
	catch关键字和异常类型用作标签,指出当异常引发时,程序应跳到这个位置执行
	异常处理程序也被称为catch块
	catch捕获异常,会将throw抛出的异常类型赋给catch块参数
  (3)try块标识其中特定的异常可能被激活的代码块,它后面跟一个或多个catch块
	try块是由关键字try指示的,关键字try后是一个由花括号括起的代码块,
	表明需要注意这些代码引发的异常
	eg: //somewhere throw
		[1]throw "something";
		[2]	try
			{
				//do something
			}
			catch(const char * s)
			{
				//do something
			}
  (4)不位于try块中的异常将不会被捕获
  (5)异常类型可以是字符串或C++其他类型,通常为类类型
  (6)程序执行完try块后没有引发异常,则程序跳过try块后面的catch块
	继续执行处理程序后面的语句

15.3.4 将对象用作异常类型
1.引发异常的函数将传递一个对象,有点是可以使用不同的异常类型来区分不同函数在不同情况下引发的异常
	异常对象可以携带信息,可以根据这些信息确定引发异常的原因
	catch块可以根据这些信息来决定采取什么样的措施
	eg: //exception class
		class bad_hmean{...};
		//exception occur
		throw bad_hmean(v1,v2);
2.可使用异常规范对函数定义进行限定,指出它将引发哪些类型的异常
	可在函数定义后面加上异常规范,它由关键字throw和异常类型列表组成,
	异常类型列表被括在括号中并用逗号分隔
	eg:	double hmean(double a,double b) throw(bad_hmean,bad_hmean1,bad_hmean2,...);
	这完成了两项工作,首先它告诉编译器该函数引发哪些类型的异常
	如果以后该函数引发了其他类型异常,程序最终将调用abort()函数
	其次,使用异常规范将提醒阅读该原型的人,该函数引发异常,应提供try块和处理程序
3.对于引发多种类型异常的函数,可提供一个由逗号分隔的异常类型列表,句法与函数参数列表相似
	eg:	double multi_err(double z) throw(const char *,double);
	函数原型及定义中都应加上异常列表
	double hmean(double a,double b) throw(bad_hmean)
	{
		if(a == -b)
			throw bad_hmean(a,b);//construct
		...
	}
4.如果异常规范中的括号内为空,则表明该函数不会引发异常
	eg:	double simple(double z) throw();
	
15.3.5 堆栈解退
1.假设try块没有调用引发异常的函数,而是调用了调用引发异常函数的函数,
	则程序的流程将从引发异常的函数跳到包含try块和处理程序的函数
	这涉及到堆栈解退(unwinding stack)
2.C++是如何处理函数调用和返回的
	(1)C++通常将信息放在栈中,来处理函数调用
		程序将调用函数的指令地址(返回地址)放到栈中,当被调用的函数执行完毕时,
		程序使用该地址来确定继续从哪里执行
	(2)函数调用参数
		函数调用将参数放到栈中,在栈中这些函数参数被视为自动变量,
		被调用函数内的自动变量也将被添加到栈中
	(3)如果被调用的函数调用了另一个函数,则后者的信息被添加到栈中
	(4)当函数结束时,程序的流程将跳转到该函数被调用的地址处
		同时栈顶元素被释放,因此函数通常都是返回到调用它的函数
		每个函数结束时释放其自动变量,如果自动变量是对象则调用其析构函数
3.堆栈解退:假设函数由于出现异常(不是由于返回)而终止,则程序也将释放栈内存,
	但不会在释放栈的第一个返回地址后停止,而是继续释放栈,直到找到一个位于try块中的返回地址
	随后控制权将转到块尾的异常处理程序,而不是函数调用后的第一个条语句
	这个过程被称为堆栈解退
4.引发机制的一个非常重要的特性,和函数返回一样,对于栈中的自动类对象,其析构函数将被调用
5.函数返回仅仅处理该函数放在栈中的对象,
	而throw语句则处理try块和throw之间整个函数调用序列放在栈中的对象
	如果没有堆栈解退特性,则引发异常后,对于中间函数调用放在栈中的自动类对象,其析构函数不会被调用

15.3.6 其他异常特性
1.虽然throw-catch机制类似于函数参数和函数返回机制,但仍有不同之处
	(1)func()返回语句是将控制权返回到调用func()的函数
		throw语句是将控制权向上返回到能够捕获这一类型异常的try-catch组合
	(2)引发异常时编译器总是创建一份临时拷贝,即使异常规范和catch块中指定的是引用
	eg:	class problem{...};
		void super() throw(problem)
		{
			...
			if(oh_no)
			{
				problem oops;
				throw oops;
			}
			...
		}
		...
		try
		{
			super();
		}
		catch(problem & p)
		{
			...statements
		}
		p将指向oops的拷贝而不是oops本身,因为super执行完毕oops将被释放
		[1]将引发异常和创建对象组合在一起将更简单
			throw problem();
		[2]throw语句将生成拷贝,catch为什么使用引用?
			因为基类引用可以指向派生类,其与任何派生类异常都匹配
	(3)引发的异常对象将被第一个与之匹配的catch块捕获,catch块的顺序应与派生顺序相反
		eg:	异常类继承层次结构
			class bad_1{...};
			class bad_2:public bad_1{...};
			class bad_3:public bad_2{...};
			void duper() throw(bad_1)
			{
				...
				if(oh_no)
					throw bad_1();
				if(rats)
					throw bad_2();
				if(drat)
					throw bad_3();
			}
			try
			{
				duper();
			}
			catch(bad_3 & be)
			{
				...
			}
			catch(bad_2 & be)
			{
				...
			}
			catch(bad_3 & be)
			{
				...
			}
			如果将bad_1 &处理程序放在最前面,它将不能捕获bad_2、bad_3
			通过按相反的顺序排列,bad_3异常将被bad_3 &处理程序捕获
	(4)在catch块的括号中使用省略号来捕获任何异常
		类似于switch的default
		eg:	catch(...)
			{
				...
			}
			...
			try
			{
				duper();
			}
			catch(bad_3 & be)
			{
				...
			}
			catch(bad_2 & be)
			{
				...
			}
			catch(bad_3 & be)
			{
				...
			}
			catch(...)//catch nay type of exception
			{
				...
			}
	(5)在catch块中使用异常类基类对象,将捕获所有派生类对象,但派生特性将被剥去,
		因此将使用虚方法的基类版本

15.3.7 exception类
(1).C++异常的主要目的是为设计容错程序提供语言级支持,
	即异常使得在程序设计中包含错误处理功能更容易,以免采取一些严格的错误处理方式
(2).新的C++编译器将异常合并到语言中
	定义了头文件exception/exception.h/except.h
	定义了exception类,C++可以把它用作其他异常类的基类
	exception类中定义了what虚拟成员函数,它返回一个字符串
	由于这是一个虚拟方法,可以在其派生类中重新定义
	eg:	#include <exception>
		class bad_hmean:public std::exception
		{
		public:
			const char * what(){return "bad argument to hmean()";}
			...
		}
		class bad_gmean:public std::exception
		{
		public:
			const char * what(){return "bad argument to gmean()";}
			...
		}
		可以在同一个基类异常处理程序中处理exception派生来的异常
		try
		{
			...
		}
		catch(std::exception & e)
		{
			cout << e.what() << endl;
		}
		也可以分别捕获它们
(3).C++库定义了很多基于exception的异常类型
	头文件exception提供了bad_exception,供函数unexpected()使用
1.stdexcept异常类
(1)头文件stdexcept定义了其他几个异常类
	定义了logic_error和runtime_error类,它们都以公有方式从exception派生而来
	eg:	class logic_error:public exception
		{
		public:
			explicit logic_error(const string & what_arg);
			...
		}
		class doamin_error:public exception
		{
		public:
			explicit doamin_error(const string & what_arg);
			...
		}
		这两个新类被用作两个派生类系列的基类
		logic_error描述了典型的逻辑错误
		构造函数参数提供了what函数返回的C风格字符串内容
	类名指出了它们用于报告的错误类型
	每一个类独有一个类似logic_error的构造函数
	[1]doamin_error 
		数学函数有domain定义域和range值域,定义域由参数的可能值组成,值域由函数可能的返回值组成
		函数参数不在定义域之间时引发domain_error异常
		std::sin();domain[-π,+π] range[-1,+1]
	[2]invalid_argument
		指出给函数传递了一个意料外的值,当传递的参数不是函数希望的值的时候,
		将引发invalid_argument异常
	[3]length_error
		用于指出没有足够的空间来执行所需的操作
		string类的append()方法在合并得到的字符串长度超出最大允许长度时,将引发length_error异常
	[4]out_of_bounds
		通常用于指示索引错误
		数组类,其operator()[]在使用的索引无效时引发out_of_bounds异常
(2)runtime_error异常系列描述了可能在运行期间发生难以预计和防范的错误
	每个类的名称指出了它用于报告错误的类型
	每一个类独有一个类似runtime_error的构造函数,以提供what函数返回的C风格字符串
	[1]range_error
	[2]overflow_error
	[3]underflow_error
		下溢(underflow)错误在浮点数计算中
		存在浮点类型可以表示的最小非零值,计算结果小于这个值时将导致下溢
		整型和浮点型都可能发生上溢错误,当计算结果超出了某种类型能够表示的最大值时,将发生上溢错误
		计算结果不在函数允许的范围内时,但没有发生上溢或下溢错误,这时可以用range_error异常
(3)logic_error一般表示可以通过编程修复的问题,runtime_error表示无法避免的问题
	所有这些错误类有相同的常规特征,区别:
		[1]不同的类名能够处理不同的异常
		[2]继承关系可以一起处理它们
2.bad_alloc异常和new
(1)处理new可能出现的内存分配异常
	[1]new无法满足内存请求时返回空指针
	[2]new引发bad_alloc异常
(2)头文件new(new.h)中包含了bad_alloc类的声明,它是从exception类公有派生而来的

15.3.8 异常、类和继承
1.异常、类和继承以第三种方式互相关联
	[1]可以像标准C++从一个异常类派生出另一个
	[2]可以在类定义中嵌套异常类声明来组合异常
	[3]嵌套声明可以被继承并可用作基类

15.3.9 异常何时会迷失方向
1.异常被引发后,在两种情况下会导致问题
	[1]如果它是在带异常规范的函数中引发的,则必须与规范列表中的某种异常匹配,否则称为意外异常(unexpected exception)
		默认情况下这将导致程序异常终止
	[2]如果异常不是在函数中引发的(或函数没有异常规范),则它必须被捕获
		如果没有被捕获(没有try或catch),则异常被称为未捕获异常(uncaught exception)
		这将导致程序异常终止
		可以为程序添加对意外异常和未捕获异常的反应
2.未捕获异常
	未捕获异常不会导致程序立刻异常终止
	程序首先调用函数terminate(),在默认情况下terminate()调用abort()函数
	可以指定terminate()应调用的函数(而不是ablort())来修改terminate()的这种行为
	为此可以调用set_terminate()函数
	set_terminate()和terminate()都是在头文件exception中声明的
	eg:	typedef void (* terminate_handler)();
		terminate_handler set_terminate(terminate_handler f) throw();
		void terminate();
		调用多次set_terminate()函数,terminate()将调用最后一次set_terminate()设置的函数
		#include <exception>
		void myQuit()
		{
			cout << "Something" <<endl;
			exit(5);
		}
		set_terminate(myQuit);
		程序发生未捕获异常将执行myQuit()函数
3.意外异常
	通过给函数指定异常规范,可以让函数的用户知道要捕获哪些异常
	eg:	double Argh(double,double) throw(out_of_bounds);
		try
		{
			x = Argh(a,b);
		}
		catch(out_of_bounds & oob)
		{
			...
		}
	通常异常规范应包含函数调用的其他函数引发的异常
	函数引发了异常规范没有的异常,这种情况下行为与未捕获异常相似
	如果发生意外异常,程序将调用unexpected()函数,这个函数将调用terminate()函数
	terminate()默认情况下将调用abort()函数
	有一个类似于修改set_terminate()的函数,用来修改unexpected()函数的行为set_unexpected()
	这些函数也是在头文件exception中声明的
	eg:	typedef void (* unexpected_handler)();
		unexpected_handler set_unexpected(unexpected_handler f) throw();
		void unexpected();
	set_unexpected()函数的行为比set_terminate()收到更严格的限制
	[1]通过调用terminate()(默认行为)、abort()、exit()来终止程序
	[2]引发异常 结果取决于unexpected_handler函数所引发的异常以及引发意外异常的函数的异常规范
		{1}如果新引发的异常与原来的异常规范相匹配,则程序将从那里进行正常处理
			即寻找与新引发的异常匹配的catch块,这种方法将用预期的异常取代意外异常
		{2}如果新引发的异常与原来的异常规范不匹配,且异常规范中没有包括std::bad_exception类型
			则程序将调用terminate(),bad_exception是从exception派生而来的,其声明位于头文件exception
		{3}如果引发的异常与原来的异常规范不匹配,且原来的异常规范中包含了std::bad_exception类型
			则不匹配的异常将被std::bad_exception异常所取代
		要捕获所有的异常
		eg:	#include <exception>

			void myUnexpected()
			{
				throw std::bad_exception();
			}
		仅使用throw不指定异常将导致重新引发原来的异常
		如果异常规范中包含了这种类型,则该异常将被bad_exception对象所取代
		在程序开始处将意外操作指定为调用该函数:
		set_unexpected(myUnexpected);
		最后将bad_exception包含在异常规范中
		double Argh(double,double) throw(out_of_bounds，bad_exception);
		try
		{
			x = Argh(a,b);
		}
		catch(out_of_bounds & ex)
		{
			...
		}
		catch(bad_exception & ex)
		{
			...
		}

15.3.10 有关异常的注意事项
1.在设计程序时就加入异常处理功能,而不是以后再添加,这样做有些缺点
	[1]使用异常会增加程序代码,降低程序的运行速度
	[2]异常规范不适用于模板,因为模板函数引发的异常可能随特定的具体化而异
	[3]异常和动态内存分配不能总是协同工作
	eg:	void test1(int n)
		{
			string mesg("I'm trapped in an endless loop");
			...
			if(oh_no)
				throw exception();
			...
			return ;
		}
		string采用动态内存分配,函数结束时将为string调用析构函数,虽然throw语句过早地终止了函数
		但它仍使得析构函数被调用,这是堆栈解退的作用,内存被正确地管理
	eg:	void test2(int n)
		{
			double * ar = new double[n];
			...
			if(oh_no)
				throw exception();
			...
			delete [] ar;
			return ;
		}
		堆栈解退将删除堆栈中的变量ar,但函数过早地终止意味着函数末尾的delete [] ar将被忽略
		指针消失了,但它指向内存并未释放,并且不可访问,简而言之,这些内存泄漏了
		可以在引发异常的函数中捕获异常,在catch块中包含一些清理代码,然后重新引发异常
	eg:	void test3(int n)
		{
			double * ar = new double[n];
			...
			try
			{
				if(oh_no)
					throw exception();
			}
			catch(exception & ex)
			{
				delete [] ar;
				throw;
			}
			...
			delete [] ar;
			return ;
		}
2.异常处理将会增加编程的工作量、增大程序、降低程序速度,应有节制地使用这种特性

15.4 RTTI
1.RTTI:运行阶段类型识别(Runtion Type Identification)

15.4.1 RTTI的用途
1.为何需要知道类型,可能希望调用列方法的正确版本
	只要该函数时类层次结构中的所有成员都拥有的虚函数,则并不需要真正需要知道对象的类型
2.派生对象可能包含不是继承而来的方法,这种情况下只有某些对象可以使用该该方法
	也可能是出于调试的目的,像跟踪生成对象的类型
	对于以上两种情况,RTTI提供解决方案
	
15.4.2 RTTI的工作原理
(1).C++有三个支持RTTI的元素:
	[1]如果可能的话,dynamic_cast操作符将使用一个指向基类的指针来生成一个指向派生类的指针
		否则该操作符返回0-空指针
	[2]typeid操作符返回一个指出对象类型的值
	[3]type_info结构存储了有关特定类型的信息
(2).只能将RTTI用于包含虚函数的类层次结构中,原因在于只有对这种类层次结构,
	才应该将派生对象的地址赋给基类指针
(3).RTTI只适用于包含虚函数的类

1.dynamic_cast操作符
(1)dynamic_cast操作符是最常用的RTTI组件,它不能回答指针指向的是哪类对象,
	但能回答是否可以安全地将对象的地址赋给特定类型的指针
	eg:	class Grand{...//has virtual methods};
		class Superb:public Grand{...};
		class Magnificent:public Superb{...};

		Grand * pg = new Grand;
		Grand * ps = new Superb;
		Grand * pm = new Magnificent;

		Magnificent * p1 = (Magnificent *)pm;//安全的
		Magnificent * p2 = (Magnificent *)pg;//不安全,将基类地址赋给派生类
		Superb      * p3 = (Magnificent *)pm;//安全的,将派生类对象地址赋给基类

	虚函数确保了这三种指针的任何一种指向Magnificent时,都将调用Magnificent的方法
(2)知道类型后就可以知道调用特定方法是否安全,要调用方法,类型并不一定要完全匹配
	而可以是定义了方法的虚拟版本的基类类型
	eg:	dynamic_cast用法
		Superb * ps = dynamic_cast<Superb *>(pg);
(3)通常,如果指向的对象(*pt)的类型为Type或者是从Type直接或间接派生而来的类型,
	则表达式:
	dynamic_cast<Type *>(pt);
	将指针pt转换为Type类型指针,否则结果为0,即空指针
(4)即使编译器支持RTTI,在默认情况下他也可能关闭该特性,如果该特性被关闭,程序仍可能通过编译,
	但将出现运行阶段错误、
	开启方法VS:项目-属性-C/C++-语言-启用运行时类型信息
	应尽可能使用虚函数,只在必要时使用RTTI
(5)也可以将dynamic_cast用于引用,没有与空指针对应的引用值,因此无法使用特殊的引用值来表示失败
	当请求不正确时,dynamic_cast将引发bad_cast异常,该异常是从exception派生而来的
	它在头文件typeinfo中定义的
	eg:	#include <typeinfo>
		...
		try
		{
			Superb & rs = dynamic_cast<Superb &>(rg);//rg &= Grand;
		}
		catch(bad_cast & bc)
		{
			...
		}
2.typeid操作符和typeinfo类
(1)typeid操作符使得能够确定两个对象是否为同种类型,与sizeof相似,可以接收两种参数
	[1]类名
	[2]结果为对象的表达式
(2)typeid操作符返回一个对typeinfo对象的引用,typeinfo是在头文件typeinfo(typeinfo.h)中定义的一个类
	typeinfo重载了==和!=操作符,以便可以使用这些操作符对类型进行比较
	eg:	pg指向Magnificent对象
		typeid(Magnificent) == typeid(*pg)//true,否则为false
		如果pg是空指针,程序将引发bad_typeid异常
		该异常类型从exception类派生而来,在头文件typeinfo中声明
		typeinfo类包含一个name()成员,该函数返回字符串,通常为类名
		cout << "Now processing type " << typeid(*pg).name() << endl;//string:Magnificent
3.误用RTTI的例子
(1)考虑在使用了typeid的if else语句系列中,使用虚函数和dynamic_cast
(2)放弃dynamic_cast和虚函数的弊端
	eg:	//better
		Grand * pg;
		Superb * ps;
		for(int i = 0;i < 5;i++)
		{
			pg = GetOne();
			cout << "Now processing type " << typeid(*pg).name() << endl;
			pg->Speak();
			if(ps = dynamic_cast<Superb *>(pg))
				ps->Say();
			if(typeid(Magnificent) == typeid(*pg))
				cout << "Yes,you're really magnificent.\n";
		}
		if(ps = dynamic_cast<Superb *>(pg))
			ps->Say();
		适用于所有从Superb派生而来的类
		//bad
		Grand * pg;
		Superb * ps;
		Magnificent * pm;
		for(int i = 0;i < 5;i++)
		{
			pg = GetOne();
			if(typeid(Magnificent) == typeid(*pg))
			{
				pm = (Magnificent *)pg;
				pm->Speak();
				pm->Say();
			}
			else if(typeid(Superb) == typeid(*pg))
			{
				ps = (Superb *)pg;
				ps->Speak();
				ps->Say();
			}
			else
			{
				pg->Speak();
			}
		}
		这样代码将变得冗长,缺少可扩展性,并且添加新的功能将必须修改for循环内容
		
15.5 类型转换操作符
1.更严格地限制允许的类型转换,添加了4个类型转换操作符,使转换过程更规范
	(1)dynamic_cast
	(2)const_cast
	(3)static_cast
	(4)reinterpret_cast
	可以根据目的选择一个操作符,而不是使用通用的类型转换
	这指出了类型转换的原因,并让编译器能够检查程序的行为是否与设计者想法吻合
	eg:	strutc Data{
			double data[200];
		};
		struct Junk{
			int junk[100];
		};
		Data d = {2.5e33,3.5e-19,20.2e32};
		char * pch = (char *)(&d);	//to string
		char ch = (char)(&d);		//address to char
		Junk * pj = (Junk *)(&d);	//to Junk pointer
		上述转换在C语言中都是允许的,但都是没有意义的
2.dynamic_cast仅当目标类型为参数类型的基类(直接或间接),dynamic_cast才能够转换成功
	class High,Low;
	pl = dynamic_cast<High *>(ph);
	dynamic_cast<type-name>(expression)
	该操作符的用途是,使得能够在类层次结构中进行向上转换(由于is-a关系,这种转换时安全的)
	而不允许其他转换
3.const_cast操作符用于执行只有一种用途的类型转换,即改变值为const或volatile
	其句法与dynamic_cast相同
	const_cast<type-name>(expression)
	如果类型的其他方面也被修改,则上述转换将出错,除了const和volatile特征(有或无)可以不同外
	type-name和expression类型必须相同
	提供该操作符的原因是有时候可能需要这样一个值,它在大多数时候是常量,
	而有时又是可以修改的,在这种情况下,可以将这个值声明为const,并在需要修改它的时候,
	使用const_cast
	这样可以通过通用类型转换来实现,但通用转换可能同时改变类型
	eg:	class High,Low;
		High bar;
		const High * pbar = &bar;
		...
		High * pb = const_cast<High *>(pbar);//valid
		使得pb成为可修改bar对象的指针,它删除const标签
		const Low * pl = const_cast<const Low *>(pbar);//invalid
		非法的,尝试将类型从const High *改为cosnt Low *

		High bar;
		const High * pbar = &bar;
		...
		High * pb = (High *)(pbar);//valid
		Low * pl = (Low * )(pbar);//valid
		由于编程时可能同时改变类型和常量特征,因此使用const_cast更安全
		const_cast可以修改指向一个值的指针,但修改const值的结果是不确定的
		
		const_cast操作符可以删除cosnt int * pt中的const使得后面的修改值的语句合法
		被声明为const的变量,编译器将禁止修改它
		如果进行了转换,编译器将生成它的一份拷贝,并且结果是不确定的
4.static_cast操作符的句法与其他类型操作符相同
	static_cast<type-name>(expression)
	仅当typename可被隐式转换为expression所属的类型或expression可被隐式转换为type-name所属的类型时
	上述转换才是合法的,否则将出错
	eg:	High是Low的基类,Pond是一个无关的类
		则从High到Low的转换、从Low到High的转换是合法的,而从Low到Pond的转换时不允许的
		High bar;
		Low blow;
		...
		High * pb = static_cast<High *>(&blow);//vaid upcast
		Low pl = static_cast<Low *>(&bar);valid downcast
		Pond * pmer = static_cast<Pond *>(&blow);//invalid Pond unrelated
		枚举值可以被转换为整型,所以可以用static_cast将整型转换为枚举值
		同样可以使用static_cast将double转换为int、将float转换为long以及其他各种数值转换
5.reinterpret_cast操作符用于天生危险的类型转换,它不允许删除const,但会执行其他操作
	reinterpret_cast<type-name>(expression)
	eg:	struct dat{short a;short b;};
		long value = 0xA224B118;
		dat * pd = reinterpret_cast<dat *>(&value);
		cout << pd->a;//display first two bytes
	reinterpret_cast并不支持所有类型转换
	可以将指针转换为足以存储指针表示的整型,但不能将指针转换为更小的整型或浮点型
	不能将函数指针转换为数据指针,反之亦然
6.C++中普通类型转换也受到限制,可以执行其他类型转换可执行的操作,加上一些组合
	static_cast或reinterpret_cast后跟const_cast,但不能执行其他操作
	eg:	char ch = (char)(&d);
		在C语言中是允许的,但在C++中是不允许的,因为对于大多数C++实现,char类型都太小,不能存储指针
		

	





	

	









	







