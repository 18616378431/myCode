1.字符串数组无空字符'\0',char name[] = "Fess";
2.	See you ...
	ee you...
	See you
	e you
3.	y
	my
	mmy
	ummy
	Yummy
4.	I read part of it all the way through.
5.	a.	Ho Ho Ho! !oH oH oH
	b.x是字符串指针,指向char的指针,char *
	c.x的值为指向字符串开始处的H地址
	d.	//把指针减1,然后使用那里的值
		*--pc,先对指针变量自减,指针所指向的地址向前移动一位,然后计算指针所指向地址内存储的值
		//取出pc指向的值,然后把该值减1
		  --*pc,先计算指针所指向地址内存储的值,然后对该值进行自减操作
	e.Ho Ho Ho!('\0')! oH oH o
	f.前者判断输出是否到达字符串末尾的空字符,后者判断指针位置是否到达字符串起始位置
		(1).检查pc是否指向空字符，使用指针所指向的值
		(2).检查pc与str是否指向同一地址，使用指针本身的值
	g.第二个循环无限执行
	h.在调用程序中对char *pr(char * str);进行声明
6.	1字节
	字符常量通常存储在int中,占用2或4字节
	字符串"$",需要存储空字符'\0',使用两个字节
7.	How are ya.sweetie?How are ya.sweetie?
	Beat the clock.
	eat the clock.
	Beat the clock. Win a toy.
	Beat
	chat
	hat
	at
	t
	t
	at
	How are ya.sweetie?
8.	faavrhee
	*le*on*sm
9.	//编写strlen()函数
	#include<stdio.h>

	int strlen1(char * str);

	int main()
	{
		char * name = "My name is wjk";

		printf("The length of name is %d.\n",strlen1(name));
		return 0;
	}

	int strlen1(char * str)
	{
		int ct = 0;
		
		while(*str)
		{
			putchar(*str);
			str++;
			ct++;
		}
		return ct;
	}

10.	#include<stdio.h>

	char *pr(char * str);

	int main()
	{
		char * name = "Hello World!";
		char * pt;

		pt = pr(name);
		if(pt != NULL)
		{
			puts(pt++);
		}
		else
		{
			puts("NULL Pointer!");
		}
		return 0;
	}

	char *pr(char * str)
	{
		char * ptr;
		ptr = str;

		while(*ptr)
		{
			if(*ptr == ' ')
			{
				str = ptr;
				break;
			}
			else
			{
				ptr++;
			}
		}
		if(*ptr == '\0')
		{
			str = NULL;
		}
		return str;
	}
11.	#include<stdio.h>
	#include<ctype.h>
	#include<string.h>
	#define ANSWER "GRANT"
	#define MAX 40

	void ToUpper(char * str);

	int main()
	{
		char try[MAX];

		puts("Who is buried in Grant's tomb?");
		gets(try);
		ToUpper(try);
		//ToUpper(ANSWER);
		while(strcmp(try,ANSWER) != 0)
		{
			puts("No,that's wrong.Try again.");
			gets(try);
			ToUpper(try);
		}
		puts("That's right!");
		return 0;
	}

	void ToUpper(char * str)
	{
		while(*str != '\0')
		{
			*str = toupper(*str);
			str++;
		}
	}

/*****************编程练习***********************************/
1.fgets();
2.fgets();
3.scanf();
4.strchr();
5.strchr();
6.strncat();
7.strstr();
//解题思路
//先判断字符串开始是否为空字符'\0',是则返回NULL

//判断首字符是否相同
//相同
//判断s2是否到达末尾，到达末尾返回p1，
//判断s1是否到达末尾，到达返回NULL
//不同,先判断p1的下一个字符是否为空字符
//是，返回NULL
//不是，将指针p2恢复到初始位置,此时，p1已经在不同的判断中后移了一位，继续循环

8.反向输出字符串,首位对换
9.删除字符串中的空白字符,遍历字符串至末尾，查找空白字符串，找到，空白之后字符全部前移一位
10.多功能字符串处理程序
	//读取10个字符或EOF
	//五个选项:
	//1.输出初始字符串列表
	//2.按ASCII顺序输出字符串
	//3.按长度递增输出字符串
	//4.按字符串中第一个单词的长度输出字符串
	//5.退出
	#include<stdio.h>
	#include<string.h>
	#define LIM 10
	#define SIZE 81

	int getStr(char s[LIM][SIZE],int n,char * p[LIM]);
	int showMenu();
	void showIt(char * p[LIM],int n);
	void showAsc(char *p[LIM],int n);
	void showStrLength(char *p[LIM],int n);
	void showStrLengthOne(char *p[LIM],int n);

	//main进行流程控制
	int main()
	{
		char str[LIM][SIZE];
		char * ptstr[LIM];//指针数组
		int i = 0;
		int choice = 0;

		puts("*************请输入要处理的字符串*************");
		//获取字符串
		i = getStr(str,i,ptstr);
		//菜单选项
		choice = showMenu();
		switch(choice)
		{
		case 1://1.输出初始字符串列表
			showIt(ptstr,i);
			break;
		case 2://2.按ASCII顺序输出字符串
			showAsc(ptstr,i);
			break;
		case 3://3.按长度递增输出字符串
			showStrLength(ptstr,i);
			break;
		case 4://4.按字符串中第一个单词的长度输出字符串
			showStrLengthOne(ptstr,i);
			break;
		default:
			break;
		}
		return 0;
	}
	//获取字符串,并且将每个字符串首地址赋给指针数组
	int getStr(char s[LIM][SIZE],int n,char * p[LIM])
	{
		while(gets(s[n]) && s[n][0] != '\0' && n < LIM - 1)
		{
			p[n] = s[n];
			n++;
		}
		return n;
	}
	//菜单选项
	int showMenu()
	{
		int choose;
		puts("*************输入选项数字执行操作*************");
		puts("1.输出原始字符串列表\t2.按ASCII顺序输出字符串");
		puts("3.按长度递增输出字符串\t4.按字符串中第一个单词的长度输出字符串");
		puts("5.回车或Q退出");
		puts("*************输入选项数字执行操作*************");
		scanf("%d",&choose);
		return choose;
	}
	//1.输出初始字符串列表
	void showIt(char *p[LIM],int n)
	{
		int k;
		for(k = 0;k < n;k++)
		{
			puts(p[k]);
		}
	}
	//2.按ASCII顺序输出字符串,只给指针排序，初始字符串未变化
	void showAsc(char *p[LIM],int n)
	{
		char * temp;
		int top,seek;

		for(top = 0;top < n - 1;top++)
		{
			for(seek = top + 1;seek < n;seek++)
			{
				if(strcmp(p[top],p[seek]) > 0)
				{
					temp = p[top];
					p[top] = p[seek];
					p[seek] = temp;
				}
			}
		}
		showIt(p,n);
	}
	//3.按长度递增输出字符串,按长度大小重新排序指针数组
	void showStrLength(char *p[LIM],int n)
	{
		char * temp;
		int top,seek;

		for(top = 0;top < n - 1;top++)
		{
			for(seek = top + 1;seek < n;seek++)
			{
				if(strlen(p[top]) > strlen(p[seek]))
				{
					temp = p[top];
					p[top] = p[seek];
					p[seek] = temp;
				}
			}
		}
		showIt(p,n);
	}
	//4.按字符串中第一个单词的长度输出字符串
	void showStrLengthOne(char *p[LIM],int n)
	{
		int i;
		int k;

		char * temp;
		int top,seek;

		for(i = 0;i < n;i++)
		{
			k = 0;
			while(p[i][k] != '\0')
			{
				if(p[i][k] == ' ')
				{
					p[i][k] = '\0';
					break;
				}
				k++;
			}
		}
		//按字符串长度进行排序
		for(top = 0;top < n - 1;top++)
		{
			for(seek = top + 1;seek < n;seek++)
			{
				if(strlen(p[top]) > strlen(p[seek]))
				{
					temp = p[top];
					p[top] = p[seek];
					p[seek] = temp;
				}
			}
		}
		//将替换掉的'\0'，替换回原来的空白符
		for(i = 0;i < n;i++)
		{
			k = 0;
			while(p[i][k] != ' ')
			{
				if(p[i][k] == '\0')
				{
					p[i][k] = ' ';
					break;
				}
				k++;
			}
		}
		showIt(p,n);
	}
/*******************************************BUG**********************************************/
选项4输入无空格，字符串无\0结束，记录替换的空白字符个数，替换回空格符，若数量为0，不进行替换
循环输入时，内存中有多余字符，\n或\0
答案思路:不是字母，指针后移，直到是字母
		从1开始计数，循环判断p[i]是否为字母，直到空格或其他符号,停止循环
		返回记录下的字母数i
		在别的函数中调用该函数，对长度大小进行排序
/*******************************************BUG**********************************************/