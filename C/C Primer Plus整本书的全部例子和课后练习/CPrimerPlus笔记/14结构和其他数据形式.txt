						十四 结构和其他数据形式

关键字:struct,union,typedef
运算符:	.	->

建立结构
	1.建立结构的格式或布局
	2.声明遵循该布局的变量
	3.获取对一个结构变量各部件的访问
函数外部声明的结构可以被本文件中其声明后的所有函数使用
函数内部声明的结构体只可以在该函数内部使用

/*************************定义结构变量***************************/
struct book library;
	是
	struct book{//还可以定义无标记的结构体
		char title[TITLE];
		char author[AUTHOR];
		float value;
	}library;
	的简化
/*************************定义结构变量***************************/

/*************************初始化结构***************************/
初始化项目必须和结构成员类型向匹配，用逗号分隔
/*************************初始化结构***************************/

/*************************访问结构成员***************************/
结构成员运算符:点(.)
结构体:结构数组、以结构为成员的结构、指向结构的指针
/*************************访问结构成员***************************/

/*************************结构的指定初始化项目***************************/
struct book suprise = {.value = 20.00};
任意顺序
struct book a = {
			.value = 10.00,
			.author = "wjk",
			.title = "Primer"};
可以在指定初始化项目之后不需指定按照结构顺序继续初始化结构的其他成员，新值覆盖旧值
struct book b = {
			.value = 10.00,
			.author = "wjk",
			21.00};//指定author之后的成员为value,初始化为21.00覆盖旧值
对特定成员的最后一次赋值是他获得的值
结构数组、嵌套结构、指向结构的指针、处理结构的函数
/*************************结构的指定初始化项目***************************/

/*************************结构数组***************************/
声明结构数组:
	struct book library[MAXBKS];//library为具有MAXBKS个元素的数组，每个元素都是一个book类型的结构
点(.)运算符标识结构数组成员:
	library[count].title[0];
点(.)运算符左边的下标用于结构数组，左边的下标用于结构成员
/*************************结构数组***************************/

/*************************嵌套结构***************************/
将一个结构定义为另一个结构的成员
/*************************嵌套结构***************************/

/*************************结构指针***************************/
声明结构指针:struct guy *him;
结构的名字不是结构的地址，需使用&运算符
访问结构成员:
	him->income，为被指向结构的一个成员，这个变量的类型和成员的类型一致
	him = &felow[0];
	(*him) = fellow[0];
	him->income = (*him).income;
	fellow[0].income = him->income = (*him).income;
*和&是互逆运算符
/*************************结构指针***************************/

/*************************向函数传递结构信息***************************/
1.传递结构成员
	结构成员的类型和函数的形参类型对应即可
	sum(stan.bankfund,stan.savefund);
	double sum(double a,double b){return (a+b);}
2.传递结构地址
	sum(&stan);
	double sum(const struct funds * money){return (money->bankfund + money->savefund);}
	使用原有结构完成计算
3.传递结构
	sum(stan);
	double sum(struct funds moolah){return (moolah.bankfund + molah.savefund);}
	根据funds模板创建一个自动变量，这个结构变量被初始化为具有stan结构成员值的副本
	使用原有结构的副本完成计算
/*************************向函数传递结构信息***************************/

/*************************结构的其他特性**********************************************/
1.可以将一个结构赋值给另一个结构
	o_data = n_data;
2.可以把结构初始化为另一个相同类型的结构
	struct names right_filed = {"Route","George"};
	struct nams captain = right_field;
3.结构可以作为函数的参数，也可以作为函数的返回值

结构还是指向结构的指针
结构指针和传递结构区别:
	结构指针:只需传递结构地址
			缺少对数据的保护，ANSI C 关键字const解决
	传递结构:处理结构的副本，对原始数据安全
			浪费时间空间
通常高效率的使用结构指针，保护数据使用const关键字

结构中使用字符指针还是字符数组
结构为字符数组分配存储位置，不为字符指针分配存储位置
字符指针所指向的位置未知，可能发生错误，字符指针应只用来管理已经创建并分配空间的字符串
字符指针和malloc()、free()配合使用
/*************************结构的其他特性**********************************************/

/***********************复合文字和结构*******************************/
struct book readfirst = (struct book){"C Primer Plus","Prata",58.00};
传递复合文字结构
	double rect_area(struct rect r);			rect_area((struct rect){10.5,13.2});
传递复合文字结构地址
	double rect_area(struct rect * r);			rect_area(&(struct rect){10.5,13.2});
/***********************复合文字和结构*******************************/

/***********************伸缩数组成员(flexible array member)****************************************/
声明伸缩数组成员规则:
	1.必须是结构体的最后一个成员
	2.结构体中至少有一个其他成员
	3.数组的方括号内为空
	EX:struct flex{
		int count;
		double average;
		double scores[];
	};
伸缩数组的使用:
	struct flex *p;//声明一个结构指针
	p = malloc(sizeof(flex) + 5*sizeof(double));;//为指针指向地址分配空间
	//访问结构成员
	p->count = 5;
	p->scores[2] = 10.00;
/***********************伸缩数组成员(flexible array member)****************************************/

/*********************使用结构数组的函数*********************/
struct funds jones[N];
将结构数组的名称(即结构数组的首地址传递给函数),jones = &jones[0];
double sum(const struct funds money[],int n);//money指向jones的第一个元素，可以使用下标访问数组成员
1.可以讲结构数组的数组名称传递给函数
2.使用数组的方括号和下标访问数组成员，使用数组名时传递结构地址的间接方法
3.const放置改变原始数据
/*********************使用结构数组的函数*********************/

/***************************把结构内容保存到文件中*************************/
结构中保存的整套信息成为记录(record)，单个项目称为字段(field)
fwrite()和fread()以结构大小为单元进行读写
	fwrite(&primer,sizeof(struct book),1,pbook);
	&permer为结构变量地址，sizeof(struct book)为结构大小,1为读写个数，pbook为文件流
	fread(&primer,sizeof(struct book),1,pbook);
	将一个结构大小的数据块读取到&primer指向的位置
/***************************把结构内容保存到文件中*************************/

/***************************适用于特定问题的数据形式***************************/
队列、二叉树、堆、哈希表和图
二叉树节点计算:2^n - 1个节点
联合、枚举、typedef4
/***************************适用于特定问题的数据形式***************************/

/***************************联合*********************************/
联合是一个能在同一存储空间里存储不同类型数据的数据类型，同一时间只存储一个类型的值
联合与结构用同样的方式建立，需要有联合模板和联合变量，联合只存储一个值，但是可以是其包含的不同类型
//带有标记的联合模板
EX:union hold{
	int digit;
	double bigfl;
	char letter;
};//联合中存储的值只能是三者中的一个
union hold fit;//hold类型联合变量
union hold save[10];//含有10个联合变量的数组
union hold * pu;//指向联合的指针
编译器根据可能需要的最大空间分配内存,EX中分配double大小的空间

联合的初始化:
1.将联合初始化为另一个相同类型的联合
2.可以初始化联合的第一个元素
3.可以使用指定初始化项目
union hold a;
a.letter = 'g';
union hold b = a;//初始化为另一个联合
union hold c = {88};//初始化第一个成员
union hold d = {.bigfl = 12.11};//指定初始化项目

fit.digit = 20;//将20存储在fit中
fit.bigfl = 20.12;//清除20，价格20.12存储的fit中
fit.letter = 'h';//清除20.12，将字符h存储在fit中

指针:
pu = &fit;
x = pu->digit;
//一般不可以使用一个成员将值保存在联合中，然后使用不同的的成员来查看这些内容，这一的做法有时有用
/***************************联合*********************************/

/**************************枚举************************************/
可以使用枚举类型(enumerated type)声明代表整数常量的符号名称,声明的常量类型为int
枚举变量可以限定为任何一种可以保存枚举常量的整数类型
C允许对枚举变量使用自增运算符，C++不可以，或者将枚举变量声明为int类型
枚举常量在数组声明中可以作为数组大小，在switch语句中可以作为标签
枚举常量默认从0开始递增
可以对枚举常量指定为一个整形数值，并且其后面的枚举常量根据被指定常量的值递增
enum spectrum{red,yellow,green,orange,blue,violet};
enum spectrum color;
/**************************枚举************************************/

/********************命名空间*************************/
C语言使用名字空间(namespace)来表示识别一个名字的程序部分
作用域是这个概念的一部分:
	名字相同，但是作用域不同的两个变量不会冲突，若具有相同的作用域，就会冲突
一个特定作用域内的结构标记、联合标记、枚举标记共享同一个名字空间
并且和同一作用域的变量使用的名字空间是不同的
struct rect{double x;double y};
int rect;//同一作用域内不会冲突
/********************命名空间*************************/

/*************************typedef简介********************************/
高级数据特性，可以为某一类型设定自己的名字
与#define的区别:
	1.typedef仅作用于类型，#define可以作用于值
	2.typedef的解释由编译器执行，而不是预处理器
	3.范围有限，有限范围内，typedef比#define更灵活
//typedef设定的名称通常为大写
EX:
	typedef unsigned char BYTE//之后可以用BYTE代表unsigned char定义变量
	BYTE x,y[10],*z;//普通变量，字符数组，字符指针
typedef定义的作用域取决于typedef语句的地方;函数内，则具有代码块作用域，函数外，则为文件作用域
#define可以实现typedef的一部分功能
	#define BYTE unsigned char;等价于 typedef unsigned char BYTE;
但是有#define无法实现的:
	typedef char * STRING;STRING name,sign;//翻译为char * name,* sign;
	而#define STRING char *;STRING name,sign;//翻译为char * name,sign;只有name是指针

可以对结构使用typedef:
	typedef struct complex{
		float real;
		float imaginary;
	} COMPLEX;//这一久可以使用COMPLEX来声明结构变量
typedef命名一个结构类型时，可以省略结构标记
	typedef struct {double x;double y}rect;
	rect r1 = {3.0,6.0};
	rect r2;
	r2 = r1;
	翻译为:
	struct {double x;double y} r1 = {3.0,6.0};
	struct {double x;double y} r2;
	r2 = r1;

两个结构的声明都不使用结构标记，但是具有完全相同的成员和类型，C认为这两个结构具有同样的类型
typedef经常用于复杂的类型:char (* FRPTC()) [5];//FRPTC声明维一个函数，返回一个指向具有5个元素的char数组的指针
/*************************typedef简介********************************/

/**********************************************声明****************************************************/
修饰符:*(指针)、()(函数)、[](数组),C允许同时使用多个修饰符
数组和函数修饰符别指针修饰符具有更高的优先级
EX:
	char board[8][8];//int数组的数组，具有八个元素的数组，每个元素具有八个元素，并且每一个元素的类型都为int
	char ** ptr;//指向指针的指针
	int * risks[10];//具有10个元素的数组，每个元素都是指向int类型的指针
	int (* risks)[10];//一个指针，指向具有10个元素的int数组
	int * oof[3][4];//3x4的数组，数组的每个元素都是指向int的指针
	int (*uuf)[3][4];//一个指针，指向3x4的int数组
	int (*uof[3])[4];//一个具有3个元素的数组，数组的每个元素都是一个指针，指向一个具有4个元素的int数组
	函数:
	char *fump();//返回指向char的指针的函数
	char (* fump)();//一个指向返回类型为char的函数的指针
	char (* fump[3])();//由3个元素组成的数组，每个元素都是一个指向返回类型为char的函数的指针
	typedef:
	typedef int arr5[5];
	typedef arr5 * p_arr5;
	typedef  p_arr5 arrp10[10];
	arr5 togs;//togs时具有5个元素的int数组
	p_arr5 p2;//p2是一个指针，指向具有5个元素的int数组
	arrp10 ap;//ap时具有10个元素的指针数组，每个指针指向具有5个元素的int数组
/**********************************************声明****************************************************/

/***********************函数指针*********************************/
C库中的sqrt()求平方根函数，接收一个指向函数的指针，无论数组元素的类型是整数、字符串或结构，sqrt()都使用这个函数对数组元素进行排序
一个指针指向int变量，它保存着int变量在内存中的存储地址
一个指针指向函数，他保存着函数代码起始位置的地址
声明一个指向特定函数类型的指针，首先声明一个该类型的函数，然后用(* pf)代替函数名，pf旧成为指向那个函数的指针了
****【函数的名称就是函数代码的起始位置】
一、因为pf指向ToUpper函数，(*pf)即为ToUpper函数，因此(*pf)(mis)与ToUpper(mis)等价
二、因为函数名是指针，可以互换地使用函数名和指向函数的指针，因此pf(mis)与ToUpper(mis)等价
声明可以接收函数指针的函数原型:void show(void (*pf)(char *),char * str);
函数中调用:pf(str);等价于(*pf)(str);
/***********************函数指针*********************************/


使用结构数组的函数声明:void showInfo(INFO ps[],int ct);调用:showInfo(myInfo,SIZE);ps[i];
使用结构指针的函数声明:void showInfo(INFO * ps,int ct);调用:showInfo(myInfo,SIZE);ps->shbzNum;